```.env
VITE_SUPABASE_PROJECT_ID="tssgzrzjxslvqmpxgsss"
VITE_SUPABASE_PUBLISHABLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzc2d6cnpqeHNsdnFtcHhnc3NzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NDQ0NzksImV4cCI6MjA3MDQyMDQ3OX0.x3dwO-gt7bp4-uM-lMktVxFdu-RaRgN8N5DM8-mqofI"
VITE_SUPABASE_URL="https://tssgzrzjxslvqmpxgsss.supabase.co"
```
```App.tsx
import React, { useEffect, useState, createElement } from 'react'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { Background } from './components/Background'
import { Header } from './components/Header'
import { Filters, FilterState } from './components/Filters'
import { Statistics } from './components/Statistics'
import { ResultsTable } from './components/ResultsTable'
import { Footer } from './components/Footer'
import { ExtendedStatsModal } from './components/ExtendedStatsModal'
import { LoadingOverlay } from './components/LoadingOverlay'
import { ToastContainer, ToastType } from './components/ToastNotification'
import { fetchMatches, Match } from './utils/supabaseClient'
import { TeamStats } from './pages/TeamStats'
import { MatchDetails } from './pages/MatchDetails'
import { Teams } from './pages/Teams'
import { Admin } from './pages/Admin'
import { v4 as uuidv4 } from 'uuid'
import { ArrowLeftIcon, UsersIcon } from 'lucide-react'
// Main dashboard component that contains the filters, statistics, and results table
const Dashboard = ({
  matches,
  filteredMatches,
  filters,
  isLoading,
  isModalOpen,
  toasts,
  setIsModalOpen,
  handleApplyFilters,
  handleReset,
  handleExport,
  removeToast,
}) => {
  return (
    <>
      <LoadingOverlay isLoading={isLoading} />
      <ToastContainer toasts={toasts} removeToast={removeToast} />
      <Header
        onOpenExtendedStats={() => setIsModalOpen(true)}
        onSearch={() => handleApplyFilters(filters)}
      />
      <main className="relative z-10">
        <section className="bg-black/20">
          <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-10 sm:py-14 page-content">
            <div className="text-center space-y-3">
              <h1 className="text-4xl sm:text-5xl md:text-6xl font-semibold tracking-tight text-white">
                Mérkőzés szűrő és statisztikák
              </h1>
              <p className="max-w-2xl mx-auto text-sm sm:text-base text-zinc-300">
                Szűrd a meccseket csapatokra és eseményekre, elemezd a
                kimeneteleket, és exportáld CSV-be.
              </p>
            </div>
            <Filters
              onApplyFilters={handleApplyFilters}
              onReset={handleReset}
              onExport={handleExport}
            />
            <Statistics
              matches={filteredMatches}
              onOpenExtendedStats={() => setIsModalOpen(true)}
            />
            <ResultsTable matches={filteredMatches} />
          </div>
        </section>
      </main>
      <Footer />
      <ExtendedStatsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        matches={matches}
        homeTeam={filters.home}
        awayTeam={filters.away}
      />
    </>
  )
}
export function App() {
  const [matches, setMatches] = useState<Match[]>([])
  const [filteredMatches, setFilteredMatches] = useState<Match[]>([])
  const [filters, setFilters] = useState<FilterState>({
    home: null,
    away: null,
    btts: null,
    comeback: null,
  })
  const [isLoading, setIsLoading] = useState(true)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [toasts, setToasts] = useState<
    Array<{
      id: string
      message: string
      type: ToastType
    }>
  >([])
  // Load initial data
  useEffect(() => {
    const loadMatches = async () => {
      try {
        setIsLoading(true)
        const data = await fetchMatches({})
        setMatches(data)
        setFilteredMatches(data)
      } catch (error) {
        console.error('Error loading matches:', error)
        addToast('Hiba történt az adatok betöltése közben', 'error')
      } finally {
        setIsLoading(false)
      }
    }
    loadMatches()
  }, [])
  const addToast = (message: string, type: ToastType) => {
    const id = uuidv4()
    setToasts((prev) => [
      ...prev,
      {
        id,
        message,
        type,
      },
    ])
  }
  const removeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id))
  }
  const handleApplyFilters = async (newFilters: FilterState) => {
    try {
      setIsLoading(true)
      setFilters(newFilters)
      // Apply filters
      const data = await fetchMatches({
        home: newFilters.home || undefined,
        away: newFilters.away || undefined,
        btts: newFilters.btts !== null ? newFilters.btts : undefined,
        comeback:
          newFilters.comeback !== null ? newFilters.comeback : undefined,
      })
      setFilteredMatches(data)
      addToast('Szűrők sikeresen alkalmazva', 'success')
    } catch (error) {
      console.error('Error applying filters:', error)
      addToast('Hiba történt a szűrők alkalmazása közben', 'error')
    } finally {
      setIsLoading(false)
    }
  }
  const handleReset = async () => {
    try {
      setIsLoading(true)
      setFilters({
        home: null,
        away: null,
        btts: null,
        comeback: null,
      })
      const data = await fetchMatches({})
      setFilteredMatches(data)
      addToast('Szűrők visszaállítva', 'success')
    } catch (error) {
      console.error('Error resetting filters:', error)
      addToast('Hiba történt a szűrők visszaállítása közben', 'error')
    } finally {
      setIsLoading(false)
    }
  }
  const handleExport = () => {
    try {
      // Create CSV content
      const headers = [
        'Hazai csapat',
        'Vendég csapat',
        'Félidő eredmény',
        'Végeredmény',
        'Mindkét csapat gólt szerzett',
        'Fordítás',
      ]
      const rows = filteredMatches.map((match) => [
        match.home,
        match.away,
        match.ht,
        match.ft,
        match.btts ? 'Igen' : 'Nem',
        match.comeback ? 'Igen' : 'Nem',
      ])
      const csvContent = [
        headers.join(','),
        ...rows.map((row) => row.join(',')),
      ].join('\n')
      // Create and download the file
      const blob = new Blob([csvContent], {
        type: 'text/csv;charset=utf-8;',
      })
      const link = document.createElement('a')
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', 'winmix_export.csv')
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      addToast('CSV export sikeres', 'success')
    } catch (error) {
      console.error('Error exporting CSV:', error)
      addToast('Hiba történt a CSV exportálása közben', 'error')
    }
  }
  return (
    <div className="antialiased text-zinc-100 bg-[#0a0a12]">
      <Background />
      <BrowserRouter>
        <Routes>
          <Route
            path="/"
            element={
              <Dashboard
                matches={matches}
                filteredMatches={filteredMatches}
                filters={filters}
                isLoading={isLoading}
                isModalOpen={isModalOpen}
                toasts={toasts}
                setIsModalOpen={setIsModalOpen}
                handleApplyFilters={handleApplyFilters}
                handleReset={handleReset}
                handleExport={handleExport}
                removeToast={removeToast}
              />
            }
          />
          <Route path="/team/:teamName" element={<TeamStats />} />
          <Route path="/match/:matchId" element={<MatchDetails />} />
          <Route path="/teams" element={<Teams />} />
          <Route path="/admin" element={<Admin />} />
        </Routes>
      </BrowserRouter>
    </div>
  )
}

```
```AppRouter.tsx
import React from 'react'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { App } from './App'
import { MatchDetails } from './pages/MatchDetails'
import { TeamStats } from './pages/TeamStats'
export function AppRouter() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<App />} />
        <Route path="/match/:matchId" element={<MatchDetails />} />
        <Route path="/team/:teamName" element={<TeamStats />} />
      </Routes>
    </BrowserRouter>
  )
}

```
```components/Background.tsx
import React, { useEffect, useState } from 'react'
export const Background: React.FC = () => {
  const [isMobile, setIsMobile] = useState(false)
  useEffect(() => {
    // Check if device is mobile
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }
    // Initial check
    checkMobile()
    // Add resize listener
    window.addEventListener('resize', checkMobile)
    // Cleanup
    return () => window.removeEventListener('resize', checkMobile)
  }, [])
  return (
    <>
      {/* Background 3D Spline - load simpler version on mobile */}
      <div className="spline-container fixed top-0 w-full h-screen -z-10">
        <iframe
          src={
            isMobile
              ? 'https://my.spline.design/aidatamodelinteraction-mdTL3FktFVHgDvFr5TKtnYDV?quality=low'
              : 'https://my.spline.design/aidatamodelinteraction-mdTL3FktFVHgDvFr5TKtnYDV'
          }
          frameBorder="0"
          width="100%"
          height="100%"
          id="aura-spline"
        ></iframe>
      </div>
      {/* Background glows */}
      <div className="pointer-events-none fixed inset-0 overflow-hidden">
        <div className="absolute -top-40 left-1/2 -translate-x-1/2 w-[600px] sm:w-[800px] md:w-[1100px] h-[600px] sm:h-[800px] md:h-[1100px] rounded-full blur-3xl opacity-35 bg-[radial-gradient(closest-side,rgba(138,92,246,0.5),rgba(10,10,18,0))]"></div>
        <div className="absolute -bottom-20 -right-20 w-[400px] sm:w-[600px] md:w-[800px] h-[400px] sm:h-[600px] md:h-[800px] rounded-full blur-3xl opacity-30 bg-[radial-gradient(closest-side,rgba(99,102,241,0.4),rgba(10,10,18,0))]"></div>
      </div>
    </>
  )
}

```
```components/ExtendedStatsModal.tsx
import React from 'react'
import { Match } from '../utils/supabaseClient'
import {
  ChartLineIcon,
  XIcon,
  CircleDotIcon,
  CircleIcon,
  TrophyIcon,
} from 'lucide-react'
interface ExtendedStatsModalProps {
  isOpen: boolean
  onClose: () => void
  matches: Match[]
  homeTeam: string | null
  awayTeam: string | null
}
export const ExtendedStatsModal: React.FC<ExtendedStatsModalProps> = ({
  isOpen,
  onClose,
  matches,
  homeTeam,
  awayTeam,
}) => {
  if (!isOpen) return null
  // Filter matches for selected teams
  const filteredMatches = matches.filter((match) => {
    if (homeTeam && awayTeam) {
      return match.home === homeTeam && match.away === awayTeam
    } else if (homeTeam) {
      return match.home === homeTeam
    } else if (awayTeam) {
      return match.away === awayTeam
    }
    return true
  })
  // Calculate statistics
  const totalMatches = filteredMatches.length
  const homeWins = filteredMatches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals > awayGoals
  }).length
  const draws = filteredMatches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals === awayGoals
  }).length
  const awayWins = filteredMatches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals < awayGoals
  }).length
  // Calculate average goals
  const homeGoalsTotal = filteredMatches.reduce(
    (sum, match) => sum + match.homeGoals,
    0,
  )
  const awayGoalsTotal = filteredMatches.reduce(
    (sum, match) => sum + match.awayGoals,
    0,
  )
  const homeGoalAvg =
    totalMatches > 0 ? (homeGoalsTotal / totalMatches).toFixed(1) : '0.0'
  const awayGoalAvg =
    totalMatches > 0 ? (awayGoalsTotal / totalMatches).toFixed(1) : '0.0'
  // Calculate BTTS percentage
  const bttsMatches = filteredMatches.filter((match) => match.btts).length
  const bttsPercentage =
    totalMatches > 0 ? Math.round((bttsMatches / totalMatches) * 100) : 0
  // Find most frequent results
  const resultCounts: Record<string, number> = {}
  filteredMatches.forEach((match) => {
    if (!resultCounts[match.ft]) {
      resultCounts[match.ft] = 0
    }
    resultCounts[match.ft]++
  })
  const frequentResults = Object.entries(resultCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5)
  // Find team logos
  const homeTeamLogo =
    filteredMatches.find((m) => m.home === homeTeam)?.homeTeam.logoUrl || ''
  const awayTeamLogo =
    filteredMatches.find((m) => m.away === awayTeam)?.awayTeam.logoUrl || ''
  return (
    <div
      id="extendedStatsModal"
      className={`fixed z-[80] inset-0 ${isOpen ? '' : 'hidden'}`}
    >
      <div
        className="absolute inset-0 bg-black/70 backdrop-blur-sm"
        onClick={onClose}
      ></div>
      <div className="relative mx-auto my-4 sm:my-10 w-full max-w-3xl px-4 max-h-[90vh] overflow-y-auto">
        <div className="rounded-2xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden">
          <div className="px-4 sm:px-6 pt-6 pb-4 border-b border-white/10">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <ChartLineIcon
                  className="text-violet-300"
                  style={{
                    width: 20,
                    height: 20,
                    strokeWidth: 1.5,
                  }}
                />
                <h3 className="text-xl sm:text-2xl font-semibold tracking-tight">
                  Bővített statisztika
                </h3>
              </div>
              <button
                className="text-zinc-400 hover:text-zinc-200"
                onClick={onClose}
              >
                <XIcon
                  style={{
                    width: 22,
                    height: 22,
                    strokeWidth: 1.5,
                  }}
                />
              </button>
            </div>
            <div className="mt-6 grid grid-cols-1 sm:grid-cols-3 items-center gap-4 rounded-xl bg-white/5 ring-1 ring-white/10 p-4">
              {homeTeam && (
                <div className="flex items-center gap-3">
                  {homeTeamLogo && (
                    <img
                      src={homeTeamLogo}
                      alt="Hazai csapat logó"
                      className="h-8 w-8 sm:h-10 sm:w-10 rounded-full ring-1 ring-white/10 object-cover"
                    />
                  )}
                  <div>
                    <div className="font-medium text-white">{homeTeam}</div>
                    <div className="text-xs text-zinc-400">Hazai csapat</div>
                  </div>
                </div>
              )}
              {(homeTeam || awayTeam) && (
                <div className="text-center">
                  <span className="inline-flex items-center gap-2 text-zinc-300">
                    <CircleDotIcon
                      style={{
                        width: 16,
                        height: 16,
                        strokeWidth: 1.5,
                      }}
                    />
                    vs
                    <CircleIcon
                      style={{
                        width: 16,
                        height: 16,
                        strokeWidth: 1.5,
                      }}
                    />
                  </span>
                </div>
              )}
              {awayTeam && (
                <div className="flex items-center justify-end gap-3">
                  <div className="text-right">
                    <div className="font-medium text-white">{awayTeam}</div>
                    <div className="text-xs text-zinc-400">Vendég csapat</div>
                  </div>
                  {awayTeamLogo && (
                    <img
                      src={awayTeamLogo}
                      alt="Vendég csapat logó"
                      className="h-8 w-8 sm:h-10 sm:w-10 rounded-full ring-1 ring-white/10 object-cover"
                    />
                  )}
                </div>
              )}
            </div>
          </div>
          <div className="px-4 sm:px-6 py-6">
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4">
              <div className="rounded-xl bg-emerald-500/10 ring-1 ring-emerald-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-emerald-300">
                  {totalMatches}
                </div>
                <div className="text-xs text-emerald-200 mt-1">
                  Mérkőzések száma
                </div>
              </div>
              <div className="rounded-xl bg-emerald-500/10 ring-1 ring-emerald-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-emerald-300">
                  {homeWins}
                </div>
                <div className="text-xs text-emerald-200 mt-1">
                  Hazai győzelmek
                </div>
              </div>
              <div className="rounded-xl bg-amber-500/10 ring-1 ring-amber-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-amber-300">
                  {draws}
                </div>
                <div className="text-xs text-amber-200 mt-1">Döntetlenek</div>
              </div>
              <div className="rounded-xl bg-sky-500/10 ring-1 ring-sky-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-sky-300">
                  {awayWins}
                </div>
                <div className="text-xs text-sky-200 mt-1">
                  Vendég győzelmek
                </div>
              </div>
              <div className="rounded-xl bg-violet-500/10 ring-1 ring-violet-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-violet-300">
                  {homeGoalAvg}
                </div>
                <div className="text-xs text-violet-200 mt-1">
                  Hazai gól átlag
                </div>
              </div>
              <div className="rounded-xl bg-indigo-500/10 ring-1 ring-indigo-400/30 p-3 sm:p-4 text-center">
                <div className="text-xl sm:text-2xl font-semibold tracking-tight text-indigo-300">
                  {awayGoalAvg}
                </div>
                <div className="text-xs text-indigo-200 mt-1">
                  Vendég gól átlag
                </div>
              </div>
            </div>
            <div className="mt-6 rounded-xl bg-white/5 ring-1 ring-white/10 p-4">
              <div className="text-sm text-zinc-300">
                Összes mérkőzésből hány mérkőzésen szerzett mind a két csapat
                gólt: <span className="font-semibold">{bttsPercentage}%</span>
              </div>
            </div>
            <div className="mt-6">
              <h4 className="font-medium text-zinc-200 mb-2 inline-flex items-center gap-2">
                <TrophyIcon
                  style={{
                    width: 16,
                    height: 16,
                    strokeWidth: 1.5,
                  }}
                />
                Leggyakoribb eredmények
              </h4>
              <ol className="list-decimal list-inside space-y-1 text-sm text-zinc-300">
                {frequentResults.length > 0 ? (
                  frequentResults.map(([result, count], index) => (
                    <li key={index}>
                      {result} ({count} alkalom)
                    </li>
                  ))
                ) : (
                  <li>Nincs elérhető adat</li>
                )}
              </ol>
            </div>
          </div>
          <div className="px-4 sm:px-6 py-4 border-t border-white/10 flex justify-end">
            <button
              type="button"
              className="inline-flex items-center gap-2 rounded-md px-4 py-2 text-sm text-zinc-200 border border-white/10 hover:bg-white/5"
              onClick={onClose}
            >
              <XIcon
                style={{
                  width: 16,
                  height: 16,
                  strokeWidth: 1.5,
                }}
              />
              Bezárás
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

```
```components/Filters.tsx
import React, { useEffect, useState, useRef } from 'react'
import {
  FilterIcon,
  SlidersHorizontalIcon,
  RotateCcwIcon,
  DownloadIcon,
  HomeIcon,
  FlagIcon,
  GoalIcon,
  ShuffleIcon,
  ChevronDownIcon,
  SaveIcon,
  BookmarkIcon,
  PlusIcon,
  TrashIcon,
  CheckIcon,
} from 'lucide-react'
import { Team, fetchTeams } from '../utils/supabaseClient'
interface FiltersProps {
  onApplyFilters: (filters: FilterState) => void
  onReset: () => void
  onExport: () => void
}
export interface FilterState {
  home: string | null
  away: string | null
  btts: boolean | null
  comeback: boolean | null
}
interface SavedFilter {
  id: string
  name: string
  filters: FilterState
}
export const Filters: React.FC<FiltersProps> = ({
  onApplyFilters,
  onReset,
  onExport,
}) => {
  const [teams, setTeams] = useState<Team[]>([])
  const [filters, setFilters] = useState<FilterState>({
    home: null,
    away: null,
    btts: null,
    comeback: null,
  })
  const [openDropdown, setOpenDropdown] = useState<string | null>(null)
  const [showFilters, setShowFilters] = useState(false)
  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([])
  const [showSaveDialog, setShowSaveDialog] = useState(false)
  const [newFilterName, setNewFilterName] = useState('')
  const [showSavedFiltersDropdown, setShowSavedFiltersDropdown] =
    useState(false)
  const dropdownRefs = {
    home: useRef<HTMLDivElement>(null),
    away: useRef<HTMLDivElement>(null),
    btts: useRef<HTMLDivElement>(null),
    comeback: useRef<HTMLDivElement>(null),
    savedFilters: useRef<HTMLDivElement>(null),
  }
  useEffect(() => {
    const loadTeams = async () => {
      const fetchedTeams = await fetchTeams()
      setTeams(fetchedTeams)
    }
    loadTeams()
    // Load saved filters from localStorage
    const loadSavedFilters = () => {
      try {
        const savedFiltersJson = localStorage.getItem('winmix_saved_filters')
        if (savedFiltersJson) {
          const parsedFilters = JSON.parse(savedFiltersJson)
          setSavedFilters(parsedFilters)
        }
      } catch (error) {
        console.error('Error loading saved filters:', error)
      }
    }
    loadSavedFilters()
  }, [])
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (openDropdown) {
        const currentRef =
          dropdownRefs[openDropdown as keyof typeof dropdownRefs]
        if (
          currentRef.current &&
          !currentRef.current.contains(event.target as Node)
        ) {
          setOpenDropdown(null)
        }
      }
      // Handle saved filters dropdown
      if (
        showSavedFiltersDropdown &&
        dropdownRefs.savedFilters.current &&
        !dropdownRefs.savedFilters.current.contains(event.target as Node)
      ) {
        setShowSavedFiltersDropdown(false)
      }
    }
    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [openDropdown, showSavedFiltersDropdown])
  const toggleDropdown = (dropdownName: string) => {
    setOpenDropdown(openDropdown === dropdownName ? null : dropdownName)
  }
  const selectTeam = (type: 'home' | 'away', team: Team) => {
    setFilters((prev) => ({
      ...prev,
      [type]: team.name,
    }))
    setOpenDropdown(null)
  }
  const selectOption = (type: 'btts' | 'comeback', value: boolean) => {
    setFilters((prev) => ({
      ...prev,
      [type]: value,
    }))
    setOpenDropdown(null)
  }
  const handleApplyFilters = () => {
    onApplyFilters(filters)
  }
  const handleReset = () => {
    setFilters({
      home: null,
      away: null,
      btts: null,
      comeback: null,
    })
    onReset()
  }
  const handleSaveFilter = () => {
    if (!newFilterName.trim()) return
    const newFilter: SavedFilter = {
      id: Date.now().toString(),
      name: newFilterName.trim(),
      filters: {
        ...filters,
      },
    }
    const updatedFilters = [...savedFilters, newFilter]
    setSavedFilters(updatedFilters)
    // Save to localStorage
    try {
      localStorage.setItem(
        'winmix_saved_filters',
        JSON.stringify(updatedFilters),
      )
    } catch (error) {
      console.error('Error saving filters:', error)
    }
    setNewFilterName('')
    setShowSaveDialog(false)
  }
  const handleDeleteFilter = (id: string) => {
    const updatedFilters = savedFilters.filter((filter) => filter.id !== id)
    setSavedFilters(updatedFilters)
    // Update localStorage
    try {
      localStorage.setItem(
        'winmix_saved_filters',
        JSON.stringify(updatedFilters),
      )
    } catch (error) {
      console.error('Error updating saved filters:', error)
    }
  }
  const handleLoadFilter = (filter: SavedFilter) => {
    setFilters(filter.filters)
    setShowSavedFiltersDropdown(false)
    onApplyFilters(filter.filters)
  }
  return (
    <div className="mt-8 ring-1 ring-white/10 bg-white/5 rounded-2xl backdrop-blur">
      <div className="px-4 sm:px-6 py-4 sm:py-5 border-b border-white/10 flex items-center justify-between">
        <div className="flex items-center gap-2 text-zinc-300">
          <FilterIcon
            style={{
              width: 18,
              height: 18,
              strokeWidth: 1.5,
            }}
          />
          <span className="text-sm font-medium">Szűrők</span>
        </div>
        <div className="flex items-center gap-2">
          <button
            className="md:hidden text-sm text-zinc-300 hover:text-zinc-100"
            onClick={() => setShowFilters(!showFilters)}
          >
            {showFilters ? 'Elrejtés' : 'Megjelenítés'}
          </button>
          <div className="hidden sm:flex items-center gap-3">
            {/* Saved filters dropdown */}
            <div className="relative" ref={dropdownRefs.savedFilters}>
              <button
                type="button"
                className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
                onClick={() =>
                  setShowSavedFiltersDropdown(!showSavedFiltersDropdown)
                }
                aria-haspopup="true"
                aria-expanded={showSavedFiltersDropdown}
                aria-label="Mentett szűrők"
              >
                <BookmarkIcon
                  style={{
                    width: 18,
                    height: 18,
                    strokeWidth: 1.5,
                  }}
                />
                Mentett szűrők
              </button>
              {showSavedFiltersDropdown && (
                <div className="absolute z-30 mt-2 w-64 rounded-xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden">
                  <div className="p-3 border-b border-white/10">
                    <h3 className="text-sm font-medium text-zinc-200">
                      Mentett szűrők
                    </h3>
                  </div>
                  <div className="max-h-60 overflow-y-auto">
                    {savedFilters.length > 0 ? (
                      <div className="divide-y divide-white/5">
                        {savedFilters.map((filter) => (
                          <div
                            key={filter.id}
                            className="p-3 hover:bg-white/5 flex items-center justify-between"
                          >
                            <button
                              className="text-left flex-1 text-sm text-zinc-300 hover:text-zinc-100"
                              onClick={() => handleLoadFilter(filter)}
                              aria-label={`Betöltés: ${filter.name}`}
                            >
                              {filter.name}
                            </button>
                            <button
                              className="text-zinc-400 hover:text-red-400 p-1"
                              onClick={() => handleDeleteFilter(filter.id)}
                              aria-label={`Törlés: ${filter.name}`}
                            >
                              <TrashIcon size={16} />
                            </button>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="p-3 text-sm text-zinc-400 text-center">
                        Nincsenek mentett szűrők
                      </div>
                    )}
                  </div>
                  <div className="p-3 border-t border-white/10">
                    <button
                      className="w-full inline-flex items-center justify-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-md px-3 py-2 hover:bg-white/5"
                      onClick={() => setShowSaveDialog(true)}
                      aria-label="Új szűrő mentése"
                    >
                      <PlusIcon size={16} />
                      Új szűrő mentése
                    </button>
                  </div>
                </div>
              )}
            </div>
            <button
              id="applyBtn"
              className="inline-flex items-center gap-2 text-sm font-semibold tracking-tight text-white bg-gradient-to-br from-violet-500 to-indigo-600 rounded-full px-4 py-2.5 shadow-lg hover:shadow-[0_12px_24px_-6px_rgba(139,92,246,0.4)] hover:-translate-y-0.5 transform-gpu transition"
              onClick={handleApplyFilters}
              aria-label="Szűrők alkalmazása"
            >
              <SlidersHorizontalIcon
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
              Szűrés
            </button>
            <button
              id="resetBtn"
              className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
              onClick={handleReset}
              aria-label="Szűrők visszaállítása"
            >
              <RotateCcwIcon
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
              Visszaállítás
            </button>
            <button
              id="saveFiltersBtn"
              className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
              onClick={() => setShowSaveDialog(true)}
              aria-label="Szűrők mentése"
            >
              <SaveIcon
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
              Mentés
            </button>
            <button
              id="exportBtn"
              className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
              onClick={onExport}
              aria-label="CSV exportálás"
            >
              <DownloadIcon
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
              CSV Export
            </button>
          </div>
        </div>
      </div>
      <div className={`px-4 sm:px-6 py-5 ${!showFilters && 'hidden md:block'}`}>
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
          {/* Hazai csapat */}
          <div className="relative" ref={dropdownRefs.home}>
            <label
              className="block text-xs text-zinc-400 mb-1.5"
              id="home-team-label"
            >
              Hazai csapat
            </label>
            <button
              type="button"
              className="w-full flex items-center justify-between rounded-xl bg-white/5 ring-1 ring-white/10 px-3 py-2.5 hover:bg-white/10"
              onClick={() => toggleDropdown('home')}
              aria-haspopup="listbox"
              aria-expanded={openDropdown === 'home'}
              aria-labelledby="home-team-label"
            >
              <div className="flex items-center gap-2 truncate">
                <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-gradient-to-br from-violet-500 to-indigo-600 ring-1 ring-white/20">
                  <HomeIcon
                    className="text-white"
                    style={{
                      width: 16,
                      height: 16,
                      strokeWidth: 1.5,
                    }}
                  />
                </span>
                <span className="text-sm text-zinc-200 font-medium truncate">
                  {filters.home || 'Válassz hazai csapatot'}
                </span>
              </div>
              <ChevronDownIcon
                className="text-zinc-300"
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
            </button>
            <div
              className={`absolute z-20 mt-2 w-full rounded-xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden ${openDropdown === 'home' ? '' : 'hidden'}`}
              role="listbox"
              aria-labelledby="home-team-label"
            >
              <div className="max-h-60 overflow-y-auto divide-y divide-white/5">
                {teams.map((team) => (
                  <div
                    key={team.id}
                    className="px-3 py-2 flex items-center gap-2 hover:bg-white/5 cursor-pointer dropdown-option"
                    onClick={() => selectTeam('home', team)}
                    role="option"
                    aria-selected={filters.home === team.name}
                  >
                    <img
                      src={team.logoUrl}
                      alt={`${team.name} logo`}
                      className="w-6 h-6 rounded-full object-cover"
                    />
                    <span className="text-sm text-zinc-200">{team.name}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          {/* Vendég csapat */}
          <div className="relative" ref={dropdownRefs.away}>
            <label
              className="block text-xs text-zinc-400 mb-1.5"
              id="away-team-label"
            >
              Vendég csapat
            </label>
            <button
              type="button"
              className="w-full flex items-center justify-between rounded-xl bg-white/5 ring-1 ring-white/10 px-3 py-2.5 hover:bg-white/10"
              onClick={() => toggleDropdown('away')}
              aria-haspopup="listbox"
              aria-expanded={openDropdown === 'away'}
              aria-labelledby="away-team-label"
            >
              <div className="flex items-center gap-2 truncate">
                <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-gradient-to-br from-fuchsia-500 to-violet-600 ring-1 ring-white/20">
                  <FlagIcon
                    className="text-white"
                    style={{
                      width: 16,
                      height: 16,
                      strokeWidth: 1.5,
                    }}
                  />
                </span>
                <span className="text-sm text-zinc-200 font-medium truncate">
                  {filters.away || 'Válassz vendég csapatot'}
                </span>
              </div>
              <ChevronDownIcon
                className="text-zinc-300"
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
            </button>
            <div
              className={`absolute z-20 mt-2 w-full rounded-xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden ${openDropdown === 'away' ? '' : 'hidden'}`}
              role="listbox"
              aria-labelledby="away-team-label"
            >
              <div className="max-h-60 overflow-y-auto divide-y divide-white/5">
                {teams.map((team) => (
                  <div
                    key={team.id}
                    className="px-3 py-2 flex items-center gap-2 hover:bg-white/5 cursor-pointer dropdown-option"
                    onClick={() => selectTeam('away', team)}
                    role="option"
                    aria-selected={filters.away === team.name}
                  >
                    <img
                      src={team.logoUrl}
                      alt={`${team.name} logo`}
                      className="w-6 h-6 rounded-full object-cover"
                    />
                    <span className="text-sm text-zinc-200">{team.name}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          {/* BTTS */}
          <div className="relative" ref={dropdownRefs.btts}>
            <label
              className="block text-xs text-zinc-400 mb-1.5"
              id="btts-label"
            >
              Mindkét csapat gólt szerzett
            </label>
            <button
              type="button"
              className="w-full flex items-center justify-between rounded-xl bg-white/5 ring-1 ring-white/10 px-3 py-2.5 hover:bg-white/10"
              onClick={() => toggleDropdown('btts')}
              aria-haspopup="listbox"
              aria-expanded={openDropdown === 'btts'}
              aria-labelledby="btts-label"
            >
              <div className="flex items-center gap-2">
                <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-white/5 ring-1 ring-white/10">
                  <GoalIcon
                    className="text-zinc-200"
                    style={{
                      width: 16,
                      height: 16,
                      strokeWidth: 1.5,
                    }}
                  />
                </span>
                <span className="text-sm text-zinc-200 font-medium">
                  {filters.btts === null
                    ? 'Válassz: Igen / Nem'
                    : filters.btts
                      ? 'Igen'
                      : 'Nem'}
                </span>
              </div>
              <ChevronDownIcon
                className="text-zinc-300"
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
            </button>
            <div
              className={`absolute z-20 mt-2 w-full rounded-xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden ${openDropdown === 'btts' ? '' : 'hidden'}`}
              role="listbox"
              aria-labelledby="btts-label"
            >
              <div className="max-h-60 overflow-y-auto divide-y divide-white/5">
                <div
                  className="px-3 py-2 hover:bg-white/5 cursor-pointer dropdown-option"
                  onClick={() => selectOption('btts', true)}
                  role="option"
                  aria-selected={filters.btts === true}
                >
                  <span className="text-sm text-zinc-200">Igen</span>
                </div>
                <div
                  className="px-3 py-2 hover:bg-white/5 cursor-pointer dropdown-option"
                  onClick={() => selectOption('btts', false)}
                  role="option"
                  aria-selected={filters.btts === false}
                >
                  <span className="text-sm text-zinc-200">Nem</span>
                </div>
              </div>
            </div>
          </div>
          {/* Fordítás */}
          <div className="relative" ref={dropdownRefs.comeback}>
            <label
              className="block text-xs text-zinc-400 mb-1.5"
              id="comeback-label"
            >
              Fordítás történt
            </label>
            <button
              type="button"
              className="w-full flex items-center justify-between rounded-xl bg-white/5 ring-1 ring-white/10 px-3 py-2.5 hover:bg-white/10"
              onClick={() => toggleDropdown('comeback')}
              aria-haspopup="listbox"
              aria-expanded={openDropdown === 'comeback'}
              aria-labelledby="comeback-label"
            >
              <div className="flex items-center gap-2">
                <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-white/5 ring-1 ring-white/10">
                  <ShuffleIcon
                    className="text-zinc-200"
                    style={{
                      width: 16,
                      height: 16,
                      strokeWidth: 1.5,
                    }}
                  />
                </span>
                <span className="text-sm text-zinc-200 font-medium">
                  {filters.comeback === null
                    ? 'Válassz: Igen / Nem'
                    : filters.comeback
                      ? 'Igen'
                      : 'Nem'}
                </span>
              </div>
              <ChevronDownIcon
                className="text-zinc-300"
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              />
            </button>
            <div
              className={`absolute z-20 mt-2 w-full rounded-xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl overflow-hidden ${openDropdown === 'comeback' ? '' : 'hidden'}`}
              role="listbox"
              aria-labelledby="comeback-label"
            >
              <div className="max-h-60 overflow-y-auto divide-y divide-white/5">
                <div
                  className="px-3 py-2 hover:bg-white/5 cursor-pointer dropdown-option"
                  onClick={() => selectOption('comeback', true)}
                  role="option"
                  aria-selected={filters.comeback === true}
                >
                  <span className="text-sm text-zinc-200">Igen</span>
                </div>
                <div
                  className="px-3 py-2 hover:bg-white/5 cursor-pointer dropdown-option"
                  onClick={() => selectOption('comeback', false)}
                  role="option"
                  aria-selected={filters.comeback === false}
                >
                  <span className="text-sm text-zinc-200">Nem</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* Action buttons */}
        <div className="mt-4 flex flex-wrap gap-3">
          <button
            className="flex-1 sm:hidden inline-flex items-center justify-center gap-2 text-sm font-semibold tracking-tight text-white bg-gradient-to-br from-violet-500 to-indigo-600 rounded-full px-4 py-2.5 shadow-lg"
            onClick={handleApplyFilters}
            aria-label="Szűrők alkalmazása"
          >
            <SlidersHorizontalIcon
              style={{
                width: 18,
                height: 18,
                strokeWidth: 1.5,
              }}
            />
            Szűrés
          </button>
          <button
            className="flex-1 sm:hidden inline-flex items-center justify-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5"
            onClick={handleReset}
            aria-label="Szűrők visszaállítása"
          >
            <RotateCcwIcon
              style={{
                width: 18,
                height: 18,
                strokeWidth: 1.5,
              }}
            />
            Visszaállítás
          </button>
          <button
            className="flex-1 sm:hidden inline-flex items-center justify-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5"
            onClick={() => setShowSaveDialog(true)}
            aria-label="Szűrők mentése"
          >
            <SaveIcon
              style={{
                width: 18,
                height: 18,
                strokeWidth: 1.5,
              }}
            />
            Mentés
          </button>
          <button
            className="flex-1 sm:hidden inline-flex items-center justify-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5"
            onClick={onExport}
            aria-label="CSV exportálás"
          >
            <DownloadIcon
              style={{
                width: 18,
                height: 18,
                strokeWidth: 1.5,
              }}
            />
            CSV Export
          </button>
        </div>
      </div>
      {/* Save filter dialog */}
      {showSaveDialog && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
          <div className="w-full max-w-md p-6 rounded-2xl ring-1 ring-white/10 bg-[#0c0f16] shadow-2xl">
            <h3 className="text-lg font-semibold text-white mb-4">
              Szűrő mentése
            </h3>
            <div className="mb-4">
              <label
                htmlFor="filterName"
                className="block text-sm text-zinc-400 mb-1"
              >
                Szűrő neve
              </label>
              <input
                type="text"
                id="filterName"
                className="w-full px-3 py-2 rounded-lg bg-white/5 ring-1 ring-white/10 text-zinc-200 focus:ring-violet-400/50 focus:outline-none"
                placeholder="Pl. Kedvenc hazai csapatom"
                value={newFilterName}
                onChange={(e) => setNewFilterName(e.target.value)}
                aria-label="Szűrő neve"
              />
            </div>
            <div className="bg-white/5 rounded-lg p-4 mb-4">
              <h4 className="text-sm font-medium text-zinc-300 mb-2">
                Mentendő szűrők
              </h4>
              <ul className="space-y-2 text-sm">
                <li className="flex items-center gap-2">
                  <HomeIcon size={14} className="text-zinc-400" />
                  <span className="text-zinc-300">Hazai: </span>
                  <span className="font-medium text-zinc-200">
                    {filters.home || 'Nincs kiválasztva'}
                  </span>
                </li>
                <li className="flex items-center gap-2">
                  <FlagIcon size={14} className="text-zinc-400" />
                  <span className="text-zinc-300">Vendég: </span>
                  <span className="font-medium text-zinc-200">
                    {filters.away || 'Nincs kiválasztva'}
                  </span>
                </li>
                <li className="flex items-center gap-2">
                  <GoalIcon size={14} className="text-zinc-400" />
                  <span className="text-zinc-300">BTTS: </span>
                  <span className="font-medium text-zinc-200">
                    {filters.btts === null
                      ? 'Nincs kiválasztva'
                      : filters.btts
                        ? 'Igen'
                        : 'Nem'}
                  </span>
                </li>
                <li className="flex items-center gap-2">
                  <ShuffleIcon size={14} className="text-zinc-400" />
                  <span className="text-zinc-300">Fordítás: </span>
                  <span className="font-medium text-zinc-200">
                    {filters.comeback === null
                      ? 'Nincs kiválasztva'
                      : filters.comeback
                        ? 'Igen'
                        : 'Nem'}
                  </span>
                </li>
              </ul>
            </div>
            <div className="flex justify-end gap-3">
              <button
                type="button"
                className="px-4 py-2 rounded-lg text-sm font-medium text-zinc-200 border border-white/10 hover:bg-white/5"
                onClick={() => setShowSaveDialog(false)}
                aria-label="Mégsem"
              >
                Mégsem
              </button>
              <button
                type="button"
                className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-gradient-to-br from-violet-500 to-indigo-600 hover:shadow-lg hover:-translate-y-0.5 transform-gpu transition"
                onClick={handleSaveFilter}
                disabled={!newFilterName.trim()}
                aria-label="Mentés"
              >
                <span className="flex items-center gap-2">
                  <SaveIcon size={16} />
                  Mentés
                </span>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

```
```components/Footer.tsx
import React from 'react'
import { Link } from 'react-router-dom'
export const Footer: React.FC = () => {
  return (
    <footer className="relative z-10 bg-black/40 border-t border-white/10 backdrop-blur-md py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <div className="flex items-center gap-2">
            <div className="h-7 w-7 rounded-lg bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center shadow-md">
              <span className="text-white font-bold text-sm">W</span>
            </div>
            <span className="text-base font-semibold tracking-tight text-white">
              WinMix
            </span>
          </div>
          <div className="flex flex-wrap justify-center gap-x-6 gap-y-2 text-sm text-zinc-400">
            <Link to="/" className="hover:text-zinc-200">
              Főoldal
            </Link>
            <a href="#" className="hover:text-zinc-200">
              Adatvédelem
            </a>
            <a href="#" className="hover:text-zinc-200">
              Feltételek
            </a>
            <a href="#" className="hover:text-zinc-200">
              Kapcsolat
            </a>
          </div>
          <div className="text-sm text-zinc-500">
            &copy; {new Date().getFullYear()} WinMix. Minden jog fenntartva.
          </div>
        </div>
      </div>
    </footer>
  )
}

```
```components/Header.tsx
import React from 'react'
import { Link } from 'react-router-dom'
import { ChartLineIcon, SearchIcon, UsersIcon, ShieldIcon } from 'lucide-react'
interface HeaderProps {
  onOpenExtendedStats: () => void
  onSearch: () => void
}
export const Header: React.FC<HeaderProps> = ({
  onOpenExtendedStats,
  onSearch,
}) => {
  return (
    <header className="relative z-20">
      <div className="bg-black/40 border-b border-white/10 backdrop-blur-md">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16 sm:h-20">
            <Link to="/" className="flex items-center gap-2">
              <div className="h-8 w-8 rounded-lg bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center shadow-lg">
                <span className="text-white font-bold text-lg">W</span>
              </div>
              <span className="text-lg sm:text-xl font-bold tracking-tight text-white">
                WinMix
              </span>
            </Link>
            <div className="flex items-center gap-2 sm:gap-4">
              <Link
                to="/teams"
                className="flex items-center justify-center gap-1.5 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-3 py-1.5 sm:px-4 sm:py-2 hover:bg-white/5"
                aria-label="Csapatok"
              >
                <UsersIcon size={16} />
                <span className="hidden sm:inline">Csapatok</span>
              </Link>
              <button
                onClick={onSearch}
                className="md:hidden p-2 text-zinc-300 hover:text-white"
                aria-label="Keresés"
              >
                <SearchIcon size={20} />
              </button>
              <button
                onClick={onOpenExtendedStats}
                className="hidden sm:flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2 hover:bg-white/5"
                aria-label="Bővített statisztika"
              >
                <ChartLineIcon size={16} />
                <span>Bővített statisztika</span>
              </button>
              <Link
                to="/admin"
                className="flex items-center justify-center gap-1.5 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-3 py-1.5 sm:px-4 sm:py-2 hover:bg-white/5"
                aria-label="Admin"
              >
                <ShieldIcon size={16} />
                <span className="hidden sm:inline">Admin</span>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </header>
  )
}

```
```components/LoadingOverlay.tsx
import React from 'react'
interface LoadingOverlayProps {
  isLoading: boolean
}
export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({
  isLoading,
}) => {
  if (!isLoading) return null
  return (
    <div className="fixed inset-0 z-50 bg-[#0a0a12]/80 backdrop-blur-sm flex items-center justify-center">
      <div className="flex flex-col items-center">
        <div className="h-12 w-12 rounded-full border-4 border-t-transparent border-violet-500 animate-spin"></div>
        <p className="mt-4 text-zinc-300 text-sm">Betöltés...</p>
      </div>
    </div>
  )
}

```
```components/ResultsTable.tsx
import React, { useEffect, useState, Component } from 'react'
import { Match } from '../utils/supabaseClient'
import {
  TableIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronsUpDownIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  BarChart4Icon,
  InfoIcon,
  CalendarIcon,
  ArrowRightIcon,
} from 'lucide-react'
import { Link } from 'react-router-dom'
interface ResultsTableProps {
  matches: Match[]
}
export const ResultsTable: React.FC<ResultsTableProps> = ({ matches }) => {
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage, setItemsPerPage] = useState(50)
  const [sortKey, setSortKey] = useState<string | null>(null)
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')
  const [expandedMatchId, setExpandedMatchId] = useState<number | null>(null)
  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const totalPages = Math.ceil(matches.length / itemsPerPage)
  // Sort matches if needed
  const sortedMatches = [...matches]
  if (sortKey) {
    sortedMatches.sort((a, b) => {
      let valueA: any
      let valueB: any
      switch (sortKey) {
        case 'home':
          valueA = a.home
          valueB = b.home
          break
        case 'away':
          valueA = a.away
          valueB = b.away
          break
        case 'ht':
          valueA = a.ht
          valueB = b.ht
          break
        case 'ft':
          valueA = a.ft
          valueB = b.ft
          break
        case 'btts':
          valueA = a.btts ? 1 : 0
          valueB = b.btts ? 1 : 0
          break
        case 'comeback':
          valueA = a.comeback ? 1 : 0
          valueB = b.comeback ? 1 : 0
          break
        default:
          return 0
      }
      if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1
      if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1
      return 0
    })
  }
  const currentMatches = sortedMatches.slice(indexOfFirstItem, indexOfLastItem)
  const handleSort = (key: string) => {
    if (sortKey === key) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortKey(key)
      setSortDirection('asc')
    }
  }
  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1)
    }
  }
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }
  const handleItemsPerPageChange = (
    e: React.ChangeEvent<HTMLSelectElement>,
  ) => {
    setItemsPerPage(Number(e.target.value))
    setCurrentPage(1)
  }
  const toggleMatchExpansion = (matchId: number) => {
    if (expandedMatchId === matchId) {
      setExpandedMatchId(null)
    } else {
      setExpandedMatchId(matchId)
    }
  }
  // Calculate quick stats for a match
  const calculateQuickStats = (match: Match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    const [htHomeGoals, htAwayGoals] = match.ht.split(' - ').map(Number)
    const totalGoals = homeGoals + awayGoals
    const htTotalGoals = htHomeGoals + htAwayGoals
    const secondHalfGoals = totalGoals - htTotalGoals
    return {
      totalGoals,
      htGoals: htTotalGoals,
      secondHalfGoals,
      homeScorePercentage:
        totalGoals > 0 ? Math.round((homeGoals / totalGoals) * 100) : 0,
      btts: match.btts,
      comeback: match.comeback,
    }
  }
  // Create mobile card view for each match
  const renderMobileMatchCard = (match: Match) => {
    const isExpanded = expandedMatchId === match.id
    const quickStats = calculateQuickStats(match)
    return (
      <div
        key={match.id}
        className="p-4 border-b border-white/10 last:border-b-0"
        aria-expanded={isExpanded}
      >
        <div className="flex justify-between items-center mb-3">
          <div className="flex items-center gap-2">
            <img
              src={match.homeTeam.logoUrl}
              alt={`${match.home} logo`}
              className="w-6 h-6 rounded-full object-cover"
            />
            <Link
              to={`/team/${encodeURIComponent(match.home)}`}
              className="text-zinc-200 font-medium hover:text-violet-300"
            >
              {match.home}
            </Link>
          </div>
          <span className="text-sm text-zinc-400">vs</span>
          <div className="flex items-center gap-2">
            <Link
              to={`/team/${encodeURIComponent(match.away)}`}
              className="text-zinc-200 font-medium hover:text-violet-300"
            >
              {match.away}
            </Link>
            <img
              src={match.awayTeam.logoUrl}
              alt={`${match.away} logo`}
              className="w-6 h-6 rounded-full object-cover"
            />
          </div>
        </div>
        <div className="grid grid-cols-2 gap-2 text-sm">
          <div className="flex flex-col">
            <span className="text-xs text-zinc-400">Félidő</span>
            <span className="text-zinc-300">{match.ht}</span>
          </div>
          <div className="flex flex-col">
            <span className="text-xs text-zinc-400">Végeredmény</span>
            <span className="text-zinc-300">{match.ft}</span>
          </div>
          <div className="flex flex-col">
            <span className="text-xs text-zinc-400">BTTS</span>
            {match.btts ? (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-emerald-500/10 text-emerald-300 ring-1 ring-emerald-400/30">
                Igen
              </span>
            ) : (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-slate-500/10 text-slate-300 ring-1 ring-slate-400/30">
                Nem
              </span>
            )}
          </div>
          <div className="flex flex-col">
            <span className="text-xs text-zinc-400">Fordítás</span>
            {match.comeback ? (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-violet-500/10 text-violet-300 ring-1 ring-violet-400/30">
                Igen
              </span>
            ) : (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-slate-500/10 text-slate-300 ring-1 ring-slate-400/30">
                Nem
              </span>
            )}
          </div>
        </div>
        {/* Expansion toggle button */}
        <button
          onClick={() => toggleMatchExpansion(match.id)}
          className="mt-3 w-full flex items-center justify-center gap-1 text-xs text-zinc-400 hover:text-zinc-300 border border-white/10 rounded-md py-1.5"
          aria-label={
            isExpanded ? 'Kevesebb részlet mutatása' : 'Több részlet mutatása'
          }
          aria-controls={`match-details-${match.id}`}
        >
          {isExpanded ? (
            <>
              Kevesebb <ChevronUpIcon size={14} />
            </>
          ) : (
            <>
              Több részlet <ChevronDownIcon size={14} />
            </>
          )}
        </button>
        {/* Expanded content */}
        {isExpanded && (
          <div
            id={`match-details-${match.id}`}
            className="mt-3 bg-white/5 rounded-lg p-3 text-sm animate-fadeIn"
          >
            <h4 className="text-zinc-300 font-medium mb-2 flex items-center gap-2">
              <BarChart4Icon size={14} />
              Gyors statisztika
            </h4>
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-white/5 rounded-md p-2">
                <div className="text-xs text-zinc-400">Összes gól</div>
                <div className="text-lg text-zinc-200 font-medium">
                  {quickStats.totalGoals}
                </div>
              </div>
              <div className="bg-white/5 rounded-md p-2">
                <div className="text-xs text-zinc-400">Első félidő gólok</div>
                <div className="text-lg text-zinc-200 font-medium">
                  {quickStats.htGoals}
                </div>
              </div>
              <div className="bg-white/5 rounded-md p-2">
                <div className="text-xs text-zinc-400">
                  Második félidő gólok
                </div>
                <div className="text-lg text-zinc-200 font-medium">
                  {quickStats.secondHalfGoals}
                </div>
              </div>
              <div className="bg-white/5 rounded-md p-2">
                <div className="text-xs text-zinc-400">Hazai gól arány</div>
                <div className="text-lg text-zinc-200 font-medium">
                  {quickStats.homeScorePercentage}%
                </div>
              </div>
            </div>
            <div className="mt-3 flex justify-end">
              <Link
                to={`/match/${match.id}`}
                className="inline-flex items-center gap-1 text-xs font-medium text-violet-300 hover:text-violet-200"
                aria-label={`${match.home} vs ${match.away} mérkőzés részleteinek megtekintése`}
              >
                Mérkőzés részletei <ArrowRightIcon size={12} />
              </Link>
            </div>
          </div>
        )}
      </div>
    )
  }
  return (
    <section id="results" className="mt-10">
      <div className="flex flex-wrap items-center justify-between mb-4 gap-3">
        <div className="flex items-center gap-3">
          <h2 className="text-2xl sm:text-3xl font-semibold tracking-tight text-white">
            Listázott eredmények
          </h2>
          <span className="inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1.5 text-xs text-zinc-300">
            <TableIcon
              style={{
                width: 14,
                height: 14,
                strokeWidth: 1.5,
              }}
            />
            Mérkőzések: {matches.length}
          </span>
        </div>
        <div className="hidden sm:flex items-center gap-2 text-xs text-zinc-400">
          <CalendarIcon
            style={{
              width: 16,
              height: 16,
              strokeWidth: 1.5,
            }}
          />
          <span>Supabase adatbázis</span>
        </div>
      </div>
      {/* Pagination Controls (Top) */}
      {matches.length > 0 && (
        <div className="mb-4 flex flex-wrap items-center justify-between bg-white/5 ring-1 ring-white/10 rounded-lg px-3 sm:px-4 py-3 gap-3">
          <div className="flex items-center gap-2 sm:gap-3">
            <span className="text-xs sm:text-sm text-zinc-400">
              Oldalanként:
            </span>
            <select
              className="bg-white/10 ring-1 ring-white/20 rounded-md px-1 sm:px-2 py-1 text-xs sm:text-sm text-zinc-200 border-none"
              value={itemsPerPage}
              onChange={handleItemsPerPageChange}
              aria-label="Oldalanként megjelenített elemek száma"
            >
              <option value={25}>25</option>
              <option value={50}>50</option>
              <option value={100}>100</option>
              <option value={200}>200</option>
            </select>
          </div>
          <div
            className="flex items-center gap-2"
            role="navigation"
            aria-label="Lapozás"
          >
            <button
              className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-200 border border-white/10 rounded-md hover:bg-white/5 disabled:opacity-50 disabled:cursor-not-allowed pagination-btn"
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              aria-label="Előző oldal"
            >
              <ChevronLeftIcon
                style={{
                  width: 16,
                  height: 16,
                }}
              />
              <span className="hidden sm:inline">Előző</span>
            </button>
            <span className="px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-300 bg-white/10 rounded-md">
              {currentPage} / {totalPages}
            </span>
            <button
              className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-200 border border-white/10 rounded-md hover:bg-white/5 disabled:opacity-50 disabled:cursor-not-allowed pagination-btn"
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              aria-label="Következő oldal"
            >
              <span className="hidden sm:inline">Következő</span>
              <ChevronRightIcon
                style={{
                  width: 16,
                  height: 16,
                }}
              />
            </button>
          </div>
        </div>
      )}
      <div className="overflow-hidden rounded-2xl ring-1 ring-white/10 bg-white/5">
        {matches.length > 0 ? (
          <>
            {/* Desktop table view */}
            <div className="hidden md:block overflow-x-auto">
              <table
                className="min-w-full text-sm"
                aria-label="Mérkőzés eredmények táblázata"
              >
                <thead className="bg-white/5 text-zinc-300">
                  <tr className="border-b border-white/10">
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'home' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('home')}
                      aria-sort={
                        sortKey === 'home'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        Hazai csapat
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'away' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('away')}
                      aria-sort={
                        sortKey === 'away'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        Vendég csapat
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'ht' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('ht')}
                      aria-sort={
                        sortKey === 'ht'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        Félidő eredmény
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'ft' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('ft')}
                      aria-sort={
                        sortKey === 'ft'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        Végeredmény
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'btts' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('btts')}
                      aria-sort={
                        sortKey === 'btts'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        BTTS
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th
                      className={`text-left font-medium px-4 py-3 cursor-pointer select-none hover:bg-white/5 ${sortKey === 'comeback' ? `sorted-${sortDirection}` : ''}`}
                      onClick={() => handleSort('comeback')}
                      aria-sort={
                        sortKey === 'comeback'
                          ? sortDirection === 'asc'
                            ? 'ascending'
                            : 'descending'
                          : 'none'
                      }
                    >
                      <div className="inline-flex items-center gap-1">
                        Fordítás
                        <ChevronsUpDownIcon
                          className="opacity-60"
                          style={{
                            width: 14,
                            height: 14,
                            strokeWidth: 1.5,
                          }}
                        />
                      </div>
                    </th>
                    <th className="text-left font-medium px-4 py-3">
                      <span className="sr-only">Műveletek</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-white/5">
                  {currentMatches.map((match) => (
                    <tr key={match.id}>
                      <td className="px-4 py-3">
                        <div className="flex items-center gap-2">
                          <img
                            src={match.homeTeam.logoUrl}
                            alt={`${match.home} logo`}
                            className="w-6 h-6 rounded-full object-cover team-logo"
                          />
                          <Link
                            to={`/team/${encodeURIComponent(match.home)}`}
                            className="text-zinc-200 hover:text-violet-300"
                          >
                            {match.home}
                          </Link>
                        </div>
                      </td>
                      <td className="px-4 py-3">
                        <div className="flex items-center gap-2">
                          <img
                            src={match.awayTeam.logoUrl}
                            alt={`${match.away} logo`}
                            className="w-6 h-6 rounded-full object-cover team-logo"
                          />
                          <Link
                            to={`/team/${encodeURIComponent(match.away)}`}
                            className="text-zinc-200 hover:text-violet-300"
                          >
                            {match.away}
                          </Link>
                        </div>
                      </td>
                      <td className="px-4 py-3 text-zinc-300">{match.ht}</td>
                      <td className="px-4 py-3 text-zinc-300">{match.ft}</td>
                      <td className="px-4 py-3">
                        {match.btts ? (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-emerald-500/10 text-emerald-300 ring-1 ring-emerald-400/30">
                            Igen
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-slate-500/10 text-slate-300 ring-1 ring-slate-400/30">
                            Nem
                          </span>
                        )}
                      </td>
                      <td className="px-4 py-3">
                        {match.comeback ? (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-violet-500/10 text-violet-300 ring-1 ring-violet-400/30">
                            Igen
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-slate-500/10 text-slate-300 ring-1 ring-slate-400/30">
                            Nem
                          </span>
                        )}
                      </td>
                      <td className="px-4 py-3 text-right">
                        <Link
                          to={`/match/${match.id}`}
                          className="inline-flex items-center gap-1 text-xs font-medium text-violet-300 hover:text-violet-200"
                          aria-label={`${match.home} vs ${match.away} mérkőzés részleteinek megtekintése`}
                        >
                          Részletek <InfoIcon size={14} />
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {/* Mobile card view */}
            <div className="md:hidden">
              <div className="divide-y divide-white/10">
                {currentMatches.map(renderMobileMatchCard)}
              </div>
            </div>
          </>
        ) : (
          <div className="px-6 py-10 text-center text-sm text-zinc-300">
            <div className="inline-flex items-center justify-center h-10 w-10 rounded-full bg-white/5 ring-1 ring-white/10 mb-3">
              <i
                className="text-zinc-300"
                style={{
                  width: 18,
                  height: 18,
                  strokeWidth: 1.5,
                }}
              >
                🔍
              </i>
            </div>
            <p>Nincs találat a megadott szűrőkkel. Módosítsd a feltételeket.</p>
          </div>
        )}
      </div>
      {/* Pagination Controls (Bottom) */}
      {matches.length > 0 && (
        <div className="mt-4 flex flex-wrap items-center justify-between bg-white/5 ring-1 ring-white/10 rounded-lg px-3 sm:px-4 py-3 gap-3">
          <div className="flex items-center gap-3 text-xs sm:text-sm text-zinc-400">
            <span>
              Összesen:{' '}
              <span className="font-medium text-zinc-200">
                {matches.length}
              </span>{' '}
              mérkőzés
            </span>
          </div>
          <div
            className="flex items-center gap-2"
            role="navigation"
            aria-label="Lapozás"
          >
            <button
              className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-200 border border-white/10 rounded-md hover:bg-white/5 disabled:opacity-50 disabled:cursor-not-allowed pagination-btn"
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              aria-label="Előző oldal"
            >
              <ChevronLeftIcon
                style={{
                  width: 16,
                  height: 16,
                }}
              />
              <span className="hidden sm:inline">Előző</span>
            </button>
            <span className="px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-300 bg-white/10 rounded-md">
              {currentPage} / {totalPages}
            </span>
            <button
              className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 sm:py-1.5 text-xs sm:text-sm text-zinc-200 border border-white/10 rounded-md hover:bg-white/5 disabled:opacity-50 disabled:cursor-not-allowed pagination-btn"
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              aria-label="Következő oldal"
            >
              <span className="hidden sm:inline">Következő</span>
              <ChevronRightIcon
                style={{
                  width: 16,
                  height: 16,
                }}
              />
            </button>
          </div>
        </div>
      )}
    </section>
  )
}

```
```components/Statistics.tsx
import React, { useEffect, useRef } from 'react'
import { Match } from '../utils/supabaseClient'
import {
  ListIcon,
  CircleDotIcon,
  MinusIcon,
  CircleIcon,
  ChartLineIcon,
  InfoIcon,
  ChartNoAxesColumnIcon,
} from 'lucide-react'
import Chart from 'chart.js/auto'
interface StatisticsProps {
  matches: Match[]
  onOpenExtendedStats: () => void
}
export const Statistics: React.FC<StatisticsProps> = ({
  matches,
  onOpenExtendedStats,
}) => {
  const resultsChartRef = useRef<HTMLCanvasElement>(null)
  const bttsChartRef = useRef<HTMLCanvasElement>(null)
  const resultsChartInstance = useRef<Chart | null>(null)
  const bttsChartInstance = useRef<Chart | null>(null)
  // Calculate statistics
  const totalMatches = matches.length
  const homeWins = matches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals > awayGoals
  }).length
  const draws = matches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals === awayGoals
  }).length
  const awayWins = matches.filter((match) => {
    const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
    return homeGoals < awayGoals
  }).length
  const bttsYes = matches.filter((match) => match.btts).length
  const bttsNo = matches.filter((match) => !match.btts).length
  useEffect(() => {
    // Create charts
    if (resultsChartRef.current && bttsChartRef.current) {
      // Destroy previous charts if they exist
      if (resultsChartInstance.current) {
        resultsChartInstance.current.destroy()
      }
      if (bttsChartInstance.current) {
        bttsChartInstance.current.destroy()
      }
      // Create results chart
      resultsChartInstance.current = new Chart(resultsChartRef.current, {
        type: 'pie',
        data: {
          labels: ['Hazai győzelem', 'Döntetlen', 'Vendég győzelem'],
          datasets: [
            {
              data: [homeWins, draws, awayWins],
              backgroundColor: [
                'rgba(16, 185, 129, 0.7)',
                'rgba(245, 158, 11, 0.7)',
                'rgba(14, 165, 233, 0.7)', // Sky for away wins
              ],
              borderColor: [
                'rgba(16, 185, 129, 1)',
                'rgba(245, 158, 11, 1)',
                'rgba(14, 165, 233, 1)',
              ],
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: 'rgba(255, 255, 255, 0.7)',
                font: {
                  size: 12,
                },
                padding: 20,
                boxWidth: 12,
                boxHeight: 12,
              },
            },
          },
        },
      })
      // Create BTTS chart
      bttsChartInstance.current = new Chart(bttsChartRef.current, {
        type: 'pie',
        data: {
          labels: ['Igen', 'Nem'],
          datasets: [
            {
              data: [bttsYes, bttsNo],
              backgroundColor: [
                'rgba(139, 92, 246, 0.7)',
                'rgba(71, 85, 105, 0.7)', // Slate for No
              ],
              borderColor: ['rgba(139, 92, 246, 1)', 'rgba(71, 85, 105, 1)'],
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: 'rgba(255, 255, 255, 0.7)',
                font: {
                  size: 12,
                },
                padding: 20,
                boxWidth: 12,
                boxHeight: 12,
              },
            },
          },
        },
      })
    }
    // Cleanup function
    return () => {
      if (resultsChartInstance.current) {
        resultsChartInstance.current.destroy()
      }
      if (bttsChartInstance.current) {
        bttsChartInstance.current.destroy()
      }
    }
  }, [matches, homeWins, draws, awayWins, bttsYes, bttsNo])
  return (
    <section id="stats" className="mt-10">
      <div className="flex flex-wrap items-center justify-between mb-4 gap-3">
        <h2 className="text-2xl sm:text-3xl font-semibold tracking-tight text-white">
          Statisztikák
        </h2>
        <div className="flex items-center gap-2">
          <button
            className="inline-flex items-center gap-2 text-xs sm:text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-3 py-1.5 hover:bg-white/5"
            onClick={onOpenExtendedStats}
          >
            <ChartLineIcon
              style={{
                width: 16,
                height: 16,
                strokeWidth: 1.5,
              }}
            />
            <span className="hidden sm:inline">Bővített statisztika</span>
            <span className="sm:hidden">Bővített stat.</span>
          </button>
          <div className="hidden sm:flex items-center gap-2 text-xs text-zinc-400">
            <InfoIcon
              style={{
                width: 16,
                height: 16,
                strokeWidth: 1.5,
              }}
            />
            <span>Szűrt eredmények alapján</span>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4">
        <div className="rounded-2xl ring-1 ring-white/10 bg-white/5 px-3 sm:px-4 py-3 sm:py-4 stats-card">
          <div className="flex items-center justify-between">
            <span className="text-xs text-zinc-400">Összes mérkőzés</span>
            <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-white/5 ring-1 ring-white/10">
              <ListIcon
                className="text-zinc-200"
                style={{
                  width: 16,
                  height: 16,
                  strokeWidth: 1.5,
                }}
              />
            </span>
          </div>
          <p className="mt-2 text-xl sm:text-2xl font-semibold tracking-tight">
            {totalMatches}
          </p>
        </div>
        <div className="rounded-2xl ring-1 ring-white/10 bg-white/5 px-3 sm:px-4 py-3 sm:py-4 stats-card">
          <div className="flex items-center justify-between">
            <span className="text-xs text-zinc-400">Hazai győzelem</span>
            <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-gradient-to-br from-emerald-500/15 to-emerald-400/10 ring-1 ring-emerald-400/30">
              <CircleDotIcon
                className="text-emerald-300"
                style={{
                  width: 16,
                  height: 16,
                  strokeWidth: 1.5,
                }}
              />
            </span>
          </div>
          <p className="mt-2 text-xl sm:text-2xl font-semibold tracking-tight">
            {homeWins}
          </p>
        </div>
        <div className="rounded-2xl ring-1 ring-white/10 bg-white/5 px-3 sm:px-4 py-3 sm:py-4 stats-card">
          <div className="flex items-center justify-between">
            <span className="text-xs text-zinc-400">Döntetlen</span>
            <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-gradient-to-br from-amber-500/15 to-amber-400/10 ring-1 ring-amber-400/30">
              <MinusIcon
                className="text-amber-300"
                style={{
                  width: 16,
                  height: 16,
                  strokeWidth: 1.5,
                }}
              />
            </span>
          </div>
          <p className="mt-2 text-xl sm:text-2xl font-semibold tracking-tight">
            {draws}
          </p>
        </div>
        <div className="rounded-2xl ring-1 ring-white/10 bg-white/5 px-3 sm:px-4 py-3 sm:py-4 stats-card">
          <div className="flex items-center justify-between">
            <span className="text-xs text-zinc-400">Vendég győzelem</span>
            <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg bg-gradient-to-br from-sky-500/15 to-sky-400/10 ring-1 ring-sky-400/30">
              <CircleIcon
                className="text-sky-300"
                style={{
                  width: 16,
                  height: 16,
                  strokeWidth: 1.5,
                }}
              />
            </span>
          </div>
          <p className="mt-2 text-xl sm:text-2xl font-semibold tracking-tight">
            {awayWins}
          </p>
        </div>
      </div>
      {/* Részletes statisztika */}
      <div className="mt-6 ring-1 ring-white/10 bg-white/5 rounded-2xl p-4 sm:p-6">
        <div className="flex items-center justify-between">
          <h3 className="text-xl font-semibold tracking-tight text-white">
            Részletes statisztika
          </h3>
          <div className="text-xs text-zinc-400 flex items-center gap-2">
            <ChartNoAxesColumnIcon
              style={{
                width: 16,
                height: 16,
                strokeWidth: 1.5,
              }}
            />
            <span>Megoszlások</span>
          </div>
        </div>
        <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="rounded-xl ring-1 ring-white/10 bg-white/5 p-4">
            <p className="text-sm text-zinc-300 mb-2">
              Eredmény megoszlás (H/D/V)
            </p>
            <div className="rounded-lg bg-white/[0.03] ring-1 ring-white/10 p-3">
              <div className="relative h-56 sm:h-64">
                <canvas ref={resultsChartRef}></canvas>
              </div>
            </div>
          </div>
          <div className="rounded-xl ring-1 ring-white/10 bg-white/5 p-4">
            <p className="text-sm text-zinc-300 mb-2">
              BTTS (Mindkét csapat gólt szerzett)
            </p>
            <div className="rounded-lg bg-white/[0.03] ring-1 ring-white/10 p-3">
              <div className="relative h-56 sm:h-64">
                <canvas ref={bttsChartRef}></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

```
```components/ToastNotification.tsx
import React, { useEffect } from 'react'
import { CheckCircleIcon, XCircleIcon, InfoIcon, XIcon } from 'lucide-react'
export type ToastType = 'success' | 'error' | 'info'
interface Toast {
  id: string
  message: string
  type: ToastType
}
interface ToastContainerProps {
  toasts: Toast[]
  removeToast: (id: string) => void
}
export const ToastContainer: React.FC<ToastContainerProps> = ({
  toasts,
  removeToast,
}) => {
  // Auto-remove toasts after 5 seconds
  useEffect(() => {
    const timers: NodeJS.Timeout[] = []
    toasts.forEach((toast) => {
      const timer = setTimeout(() => {
        removeToast(toast.id)
      }, 5000)
      timers.push(timer)
    })
    return () => {
      timers.forEach((timer) => clearTimeout(timer))
    }
  }, [toasts, removeToast])
  if (toasts.length === 0) return null
  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 w-80">
      {toasts.map((toast) => (
        <ToastNotification
          key={toast.id}
          toast={toast}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </div>
  )
}
interface ToastNotificationProps {
  toast: Toast
  onClose: () => void
}
const ToastNotification: React.FC<ToastNotificationProps> = ({
  toast,
  onClose,
}) => {
  const { type, message } = toast
  let icon
  let colorClasses = ''
  switch (type) {
    case 'success':
      icon = <CheckCircleIcon className="text-emerald-400" size={18} />
      colorClasses = 'bg-emerald-500/10 ring-emerald-400/30'
      break
    case 'error':
      icon = <XCircleIcon className="text-red-400" size={18} />
      colorClasses = 'bg-red-500/10 ring-red-400/30'
      break
    case 'info':
    default:
      icon = <InfoIcon className="text-blue-400" size={18} />
      colorClasses = 'bg-blue-500/10 ring-blue-400/30'
      break
  }
  return (
    <div
      className={`rounded-lg ring-1 px-4 py-3 shadow-xl animate-fadeIn ${colorClasses}`}
      role="alert"
    >
      <div className="flex items-center gap-2">
        {icon}
        <span className="text-sm text-zinc-200">{message}</span>
        <button
          onClick={onClose}
          className="ml-auto text-zinc-400 hover:text-zinc-300"
          aria-label="Bezárás"
        >
          <XIcon size={16} />
        </button>
      </div>
    </div>
  )
}

```
```Htmlscript.js
// WinMix - Main Application Script
class WinMixApp {
  constructor() {
    // Application state
    this.matches = [];
    this.filteredMatches = [];
    this.currentPage = 1;
    this.itemsPerPage = 50;
    this.totalPages = 1;
    this.sortBy = null;
    this.sortOrder = 'asc';
    
    // Filter state
    this.filters = {
      home: null,
      away: null,
      btts: null,
      comeback: null
    };
    
    // Configuration
    this.STORAGE_KEY = 'winmix_filters_v2';
    this.SUPABASE_URL = 'https://tssgzrzjxslvqmpxgsss.supabase.co';
    this.SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzc2d6cnpqeHNsdnFtcHhnc3NzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NDQ0NzksImV4cCI6MjA3MDQyMDQ3OX0.x3dwO-gt7bp4-uM-lMktVxFdu-RaRgN8N5DM8-mqofI';
    
    // DOM elements cache
    this.elements = {};
    
    // Charts
    this.chartResults = null;
    this.chartBTTS = null;
    
    // Initialize
    this.init();
  }
  
  async init() {
    try {
      this.cacheElements();
      this.initSupabase();
      this.setupEventListeners();
      this.setupDropdowns();
      this.initCharts();
      this.loadStoredFilters();
      
      // Load initial data
      await this.loadData();
      
      // Initialize Lucide icons
      lucide.createIcons();
    } catch (error) {
      console.error('Initialization error:', error);
      this.showError('Hiba történt az alkalmazás inicializálása során.');
    }
  }
  
  cacheElements() {
    const ids = [
      'loadingOverlay', 'toastContainer', 'resultsBody', 'listedCount',
      'statTotal', 'statHome', 'statDraw', 'statAway', 'noResultsMessage',
      'chartResults', 'chartBTTS', 'extendedStatsModal', 'paginationTop', 
      'paginationBottom', 'itemsPerPage', 'totalItems', 'pageInfoTop', 
      'pageInfoBottom', 'prevPageTop', 'nextPageTop', 'prevPageBottom', 
      'nextPageBottom'
    ];
    
    ids.forEach(id => {
      this.elements[id] = document.getElementById(id);
    });
    
    // Button collections
    this.elements.applyButtons = document.querySelectorAll('#applyBtn, #applyBtnMain, #applyBtnMobile');
    this.elements.resetButtons = document.querySelectorAll('#resetBtn, #resetBtnMobile');
    this.elements.exportButtons = document.querySelectorAll('#exportBtn, #exportBtnMobile');
    this.elements.extendedStatsButtons = document.querySelectorAll('#extendedStatsBtn, #extendedStatsBtnHeader');
    this.elements.modalCloseButtons = document.querySelectorAll('#closeModal, #closeModalX');
    
    // Table headers for sorting
    this.elements.sortHeaders = document.querySelectorAll('th[data-sort-key]');
  }
  
  initSupabase() {
    const { createClient } = supabase;
    this.supabaseClient = createClient(this.SUPABASE_URL, this.SUPABASE_KEY);
  }
  
  setupEventListeners() {
    // Apply filters
    this.elements.applyButtons.forEach(btn => {
      btn.addEventListener('click', () => this.applyFilters());
    });
    
    // Reset filters
    this.elements.resetButtons.forEach(btn => {
      btn.addEventListener('click', () => this.resetFilters());
    });
    
    // Export CSV
    this.elements.exportButtons.forEach(btn => {
      btn.addEventListener('click', () => this.exportCSV());
    });
    
    // Extended statistics
    this.elements.extendedStatsButtons.forEach(btn => {
      btn.addEventListener('click', () => this.showExtendedStats());
    });
    
    // Modal close
    this.elements.modalCloseButtons.forEach(btn => {
      btn.addEventListener('click', () => this.hideExtendedStats());
    });
    
    // Sort headers
    this.elements.sortHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const sortKey = header.getAttribute('data-sort-key');
        this.handleSort(sortKey);
      });
    });
    
    // Pagination
    this.setupPaginationListeners();
    
    // Items per page change
    if (this.elements.itemsPerPage) {
      this.elements.itemsPerPage.addEventListener('change', (e) => {
        this.itemsPerPage = parseInt(e.target.value);
        this.currentPage = 1;
        this.renderCurrentPage();
        this.updatePaginationControls();
        this.saveSettingsToStorage();
      });
    }
    
    // Modal backdrop click
    if (this.elements.extendedStatsModal) {
      this.elements.extendedStatsModal.addEventListener('click', (e) => {
        if (e.target === this.elements.extendedStatsModal) {
          this.hideExtendedStats();
        }
      });
    }
    
    // Global click handler for dropdowns
    document.addEventListener('click', (e) => {
      if (!e.target.closest('[data-dropdown]')) {
        this.closeAllDropdowns();
      }
    });
  }
  
  setupPaginationListeners() {
    // Previous page buttons
    document.querySelectorAll('#prevPageTop, #prevPageBottom').forEach(btn => {
      btn.addEventListener('click', () => this.previousPage());
    });
    
    // Next page buttons
    document.querySelectorAll('#nextPageTop, #nextPageBottom').forEach(btn => {
      btn.addEventListener('click', () => this.nextPage());
    });
  }
  
  setupDropdowns() {
    // Home team dropdown
    this.buildDropdown('home', []);
    
    // Away team dropdown
    this.buildDropdown('away', []);
    
    // BTTS dropdown
    this.buildDropdown('btts', [
      { text: 'Mindegy', value: '' },
      { text: 'Igen', value: 'true' },
      { text: 'Nem', value: 'false' }
    ]);
    
    // Comeback dropdown
    this.buildDropdown('comeback', [
      { text: 'Mindegy', value: '' },
      { text: 'Igen', value: 'true' },
      { text: 'Nem', value: 'false' }
    ]);
  }
  
  buildDropdown(type, options) {
    const dropdown = document.querySelector(`[data-dropdown="${type}"]`);
    if (!dropdown) return;
    
    const trigger = dropdown.querySelector('[data-trigger]');
    const menu = dropdown.querySelector('[data-menu]');
    const optionsContainer = dropdown.querySelector('[data-options]');
    const label = dropdown.querySelector('[data-label]');
    
    // Clear existing options
    optionsContainer.innerHTML = '';
    
    // Add options
    options.forEach(option => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'w-full text-left px-3 py-2 hover:bg-white/5 text-sm text-zinc-200 dropdown-option';
      button.textContent = option.text;
      button.dataset.value = option.value;
      
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        this.selectDropdownOption(type, option.value, option.text);
        menu.classList.add('hidden');
      });
      
      optionsContainer.appendChild(button);
    });
    
    // Trigger click handler
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      this.closeAllDropdowns();
      menu.classList.toggle('hidden');
    });
  }
  
  selectDropdownOption(type, value, text) {
    const dropdown = document.querySelector(`[data-dropdown="${type}"]`);
    const label = dropdown.querySelector('[data-label]');
    
    if (type === 'home') {
      this.filters.home = value || null;
      label.textContent = text;
    } else if (type === 'away') {
      this.filters.away = value || null;
      label.textContent = text;
    } else if (type === 'btts') {
      this.filters.btts = value === '' ? null : value === 'true';
      label.textContent = text;
    } else if (type === 'comeback') {
      this.filters.comeback = value === '' ? null : value === 'true';
      label.textContent = text;
    }
    
    this.saveFiltersToStorage();
  }
  
  closeAllDropdowns() {
    document.querySelectorAll('[data-menu]').forEach(menu => {
      menu.classList.add('hidden');
    });
  }
  
  async loadData() {
    this.showLoading();
    
    try {
      const { data, error } = await this.supabaseClient
        .from('matches')
        .select('*')
        .order('match_time', { ascending: false });
      
      if (error) throw error;
      
      // Transform the data
      this.matches = this.transformSupabaseData(data || []);
      
      // If no data from Supabase, use sample data
      if (this.matches.length === 0) {
        this.matches = this.generateSampleData();
        this.showInfo('Minta adatok betöltve. Az adatbázis kapcsolat nem elérhető.');
      }
      
      // Update team dropdowns
      this.updateTeamDropdowns();
      
      // Apply initial filters and render
      this.applyFilters();
      
    } catch (error) {
      console.error('Data loading error:', error);
      this.matches = this.generateSampleData();
      this.updateTeamDropdowns();
      this.applyFilters();
      this.showError('Hiba az adatok betöltése során. Minta adatok betöltve.');
    } finally {
      this.hideLoading();
    }
  }
  
  transformSupabaseData(data) {
    return data.map(match => {
      const ht = `${match.half_time_home_goals ?? 0}-${match.half_time_away_goals ?? 0}`;
      const ft = `${match.full_time_home_goals ?? 0}-${match.full_time_away_goals ?? 0}`;
      
      return {
        home: match.home_team,
        away: match.away_team,
        ht: ht,
        ft: ft,
        res: this.getResultFromScore(ft),
        btts: this.getBTTSFromScore(ft),
        comeback: this.getComebackFromScores(ht, ft),
        date: match.match_time ? new Date(match.match_time) : new Date()
      };
    });
  }
  
  generateSampleData() {
    const teams = [
      'Ferencváros', 'Újpest', 'Debrecen', 'Paks', 'Videoton', 'Honvéd',
      'Kisvárda', 'Zalaegerszeg', 'Diósgyőr', 'Gyirmót', 'Budafok', 'Soroksár',
      'Barcelona', 'Real Madrid', 'Atletico Madrid', 'Sevilla', 'Valencia',
      'Villarreal', 'Real Sociedad', 'Athletic Bilbao', 'Celta Vigo', 'Getafe'
    ];
    
    const sampleMatches = [];
    const baseDate = new Date('2024-01-01');
    
    // Generate approximately 5000 matches
    for (let i = 0; i < 5000; i++) {
      const homeGoals = Math.floor(Math.random() * 5);
      const awayGoals = Math.floor(Math.random() * 5);
      const htHomeGoals = Math.floor(Math.random() * (homeGoals + 1));
      const htAwayGoals = Math.floor(Math.random() * (awayGoals + 1));
      
      const ht = `${htHomeGoals}-${htAwayGoals}`;
      const ft = `${homeGoals}-${awayGoals}`;
      
      const matchDate = new Date(baseDate.getTime() + (i * 24 * 60 * 60 * 1000 / 5));
      
      sampleMatches.push({
        home: teams[Math.floor(Math.random() * teams.length)],
        away: teams[Math.floor(Math.random() * teams.length)],
        ht: ht,
        ft: ft,
        res: this.getResultFromScore(ft),
        btts: this.getBTTSFromScore(ft),
        comeback: this.getComebackFromScores(ht, ft),
        date: matchDate
      });
    }
    
    return sampleMatches;
  }
  
  getResultFromScore(score) {
    const [home, away] = score.split('-').map(n => parseInt(n, 10));
    if (home > away) return 'H';
    if (home < away) return 'A';
    return 'D';
  }
  
  getBTTSFromScore(score) {
    const [home, away] = score.split('-').map(n => parseInt(n, 10));
    return home > 0 && away > 0;
  }
  
  getComebackFromScores(htScore, ftScore) {
    const [htHome, htAway] = htScore.split('-').map(n => parseInt(n, 10));
    const [ftHome, ftAway] = ftScore.split('-').map(n => parseInt(n, 10));
    
    // Check if halftime leader is different from fulltime leader
    const htResult = htHome > htAway ? 'H' : htHome < htAway ? 'A' : 'D';
    const ftResult = ftHome > ftAway ? 'H' : ftHome < ftAway ? 'A' : 'D';
    
    return htResult !== 'D' && ftResult !== 'D' && htResult !== ftResult;
  }
  
  updateTeamDropdowns() {
    const homeTeams = [...new Set(this.matches.map(m => m.home))].sort();
    const awayTeams = [...new Set(this.matches.map(m => m.away))].sort();
    
    // Update home dropdown
    const homeOptions = [
      { text: 'Mindegy', value: '' },
      ...homeTeams.map(team => ({ text: team, value: team }))
    ];
    this.buildDropdown('home', homeOptions);
    
    // Update away dropdown
    const awayOptions = [
      { text: 'Mindegy', value: '' },
      ...awayTeams.map(team => ({ text: team, value: team }))
    ];
    this.buildDropdown('away', awayOptions);
  }
  
  applyFilters() {
    let filtered = [...this.matches];
    
    // Apply filters
    if (this.filters.home) {
      filtered = filtered.filter(m => m.home === this.filters.home);
    }
    
    if (this.filters.away) {
      filtered = filtered.filter(m => m.away === this.filters.away);
    }
    
    if (this.filters.btts !== null) {
      filtered = filtered.filter(m => m.btts === this.filters.btts);
    }
    
    if (this.filters.comeback !== null) {
      filtered = filtered.filter(m => m.comeback === this.filters.comeback);
    }
    
    // Apply sorting
    filtered = this.sortMatches(filtered);
    
    this.filteredMatches = filtered;
    this.currentPage = 1;
    this.totalPages = Math.ceil(filtered.length / this.itemsPerPage);
    
    // Update UI
    this.renderCurrentPage();
    this.updateStats();
    this.updateCharts();
    this.updatePaginationControls();
    this.saveFiltersToStorage();
    
    // Show/hide no results message
    this.elements.noResultsMessage.classList.toggle('hidden', filtered.length > 0);
    
    // Show/hide pagination
    this.elements.paginationTop.classList.toggle('hidden', filtered.length === 0);
    this.elements.paginationBottom.classList.toggle('hidden', filtered.length === 0);
  }
  
  sortMatches(matches) {
    if (!this.sortBy) return matches;
    
    return [...matches].sort((a, b) => {
      let result = 0;
      
      switch (this.sortBy) {
        case 'home':
        case 'away':
          result = a[this.sortBy].localeCompare(b[this.sortBy], 'hu');
          break;
          
        case 'ht':
        case 'ft':
          const [aHome, aAway] = a[this.sortBy].split('-').map(n => parseInt(n, 10));
          const [bHome, bAway] = b[this.sortBy].split('-').map(n => parseInt(n, 10));
          result = (aHome + aAway) - (bHome + bAway);
          if (result === 0) result = aHome - bHome;
          break;
          
        case 'btts':
        case 'comeback':
          result = (a[this.sortBy] ? 1 : 0) - (b[this.sortBy] ? 1 : 0);
          break;
      }
      
      return this.sortOrder === 'asc' ? result : -result;
    });
  }
  
  handleSort(sortKey) {
    if (this.sortBy === sortKey) {
      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortBy = sortKey;
      this.sortOrder = 'asc';
    }
    
    this.updateSortIndicators();
    this.applyFilters();
  }
  
  updateSortIndicators() {
    this.elements.sortHeaders.forEach(header => {
      const key = header.getAttribute('data-sort-key');
      const icon = header.querySelector('i[data-lucide]');
      
      if (this.sortBy === key) {
        icon.setAttribute('data-lucide', this.sortOrder === 'asc' ? 'chevron-up' : 'chevron-down');
      } else {
        icon.setAttribute('data-lucide', 'chevrons-up-down');
      }
    });
    
    lucide.createIcons();
  }
  
  renderCurrentPage() {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    const pageMatches = this.filteredMatches.slice(startIndex, endIndex);
    
    this.renderMatches(pageMatches);
    this.updateMatchCount();
  }
  
  renderMatches(matches) {
    const tbody = this.elements.resultsBody;
    tbody.innerHTML = '';
    
    const fragment = document.createDocumentFragment();
    
    matches.forEach(match => {
      const row = this.createMatchRow(match);
      fragment.appendChild(row);
    });
    
    tbody.appendChild(fragment);
    lucide.createIcons();
  }
  
  createMatchRow(match) {
    const tr = document.createElement('tr');
    tr.className = 'hover:bg-white/5 transition';
    
    const bttsText = match.btts ? 'Igen' : 'Nem';
    const comebackText = match.comeback ? 'Fordítás' : 'Nincs';
    
    // Get team logos
    const homeLogo = this.getTeamLogo(match.home);
    const awayLogo = this.getTeamLogo(match.away);
    
    // Result styling
    const resultClass = match.res === 'H' 
      ? 'bg-emerald-500/10 text-emerald-300 ring-emerald-400/30'
      : match.res === 'A' 
      ? 'bg-sky-500/10 text-sky-300 ring-sky-400/30'
      : 'bg-amber-500/10 text-amber-300 ring-amber-400/30';
    
    const resultIcon = match.res === 'H' ? 'circle-dot' : match.res === 'A' ? 'circle' : 'minus';
    
    tr.innerHTML = `
      <td class="px-4 py-3 text-zinc-200">
        <div class="flex items-center gap-2">
          <img src="${homeLogo}" alt="${match.home} logo" class="h-6 w-6 rounded-full ring-1 ring-white/10 object-cover team-logo" onerror="this.src='https://via.placeholder.com/24x24?text=?'">
          <span>${match.home}</span>
        </div>
      </td>
      <td class="px-4 py-3 text-zinc-200">
        <div class="flex items-center gap-2">
          <img src="${awayLogo}" alt="${match.away} logo" class="h-6 w-6 rounded-full ring-1 ring-white/10 object-cover team-logo" onerror="this.src='https://via.placeholder.com/24x24?text=?'">
          <span>${match.away}</span>
        </div>
      </td>
      <td class="px-4 py-3 text-zinc-300">${match.ht}</td>
      <td class="px-4 py-3">
        <span class="inline-flex items-center gap-2 rounded-full px-2.5 py-1 text-xs ring-1 ${resultClass}">
          <i data-lucide="${resultIcon}" style="width:14px; height:14px; stroke-width:1.5;"></i>
          ${match.ft}
        </span>
      </td>
      <td class="px-4 py-3">
        <span class="inline-flex items-center gap-1.5 rounded-md px-2 py-1 text-xs ring-1 ${match.btts ? 'bg-indigo-500/10 text-indigo-300 ring-indigo-400/30' : 'bg-white/5 text-zinc-300 ring-white/10'}">
          ${bttsText}
        </span>
      </td>
      <td class="px-4 py-3">
        <span class="inline-flex items-center gap-1.5 rounded-md px-2 py-1 text-xs ring-1 ${match.comeback ? 'bg-fuchsia-500/10 text-fuchsia-300 ring-fuchsia-400/30' : 'bg-white/5 text-zinc-300 ring-white/10'}">
          <i data-lucide="${match.comeback ? 'shuffle' : 'minus'}" style="width:14px; height:14px; stroke-width:1.5;"></i>
          ${comebackText}
        </span>
      </td>
    `;
    
    return tr;
  }
  
  getTeamLogo(teamName) {
    const teamLogos = {
      'Ferencváros': 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Ferencvarosi_TC_logo.svg/500px-Ferencvarosi_TC_logo.svg.png',
      'Újpest': 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Ujpest_FC_logo.svg/500px-Ujpest_FC_logo.svg.png',
      'Debrecen': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Debreceni_VSC_logo.svg/500px-Debreceni_VSC_logo.svg.png',
      'Paks': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Paksi_FC_logo.svg/500px-Paksi_FC_logo.svg.png',
      'Barcelona': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/FC_Barcelona_%28crest%29.svg/500px-FC_Barcelona_%28crest%29.svg.png',
      'Real Madrid': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Real_Madrid_CF.svg/500px-Real_Madrid_CF.svg.png',
      'Atletico Madrid': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Atletico_Madrid_2017_logo.svg/500px-Atletico_Madrid_2017_logo.svg.png'
    };
    
    return teamLogos[teamName] || 'https://via.placeholder.com/24x24/4f46e5/ffffff?text=' + encodeURIComponent(teamName.charAt(0));
  }
  
  updateMatchCount() {
    const totalMatches = this.filteredMatches.length;
    this.elements.listedCount.innerHTML = `
      <i data-lucide="table" style="width:14px; height:14px; stroke-width:1.5;"></i>
      Mérkőzések: ${totalMatches}
    `;
    
    if (this.elements.totalItems) {
      this.elements.totalItems.textContent = totalMatches;
    }
    
    lucide.createIcons();
  }
  
  updateStats() {
    const matches = this.filteredMatches;
    const total = matches.length;
    const home = matches.filter(m => m.res === 'H').length;
    const draw = matches.filter(m => m.res === 'D').length;
    const away = matches.filter(m => m.res === 'A').length;
    
    this.elements.statTotal.textContent = total;
    this.elements.statHome.textContent = home;
    this.elements.statDraw.textContent = draw;
    this.elements.statAway.textContent = away;
  }
  
  // Pagination methods
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.renderCurrentPage();
      this.updatePaginationControls();
      this.scrollToResults();
    }
  }
  
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.renderCurrentPage();
      this.updatePaginationControls();
      this.scrollToResults();
    }
  }
  
  updatePaginationControls() {
    // Show pagination if there are matches
    const showPagination = this.filteredMatches.length > 0;
    this.elements.paginationTop.classList.toggle('hidden', !showPagination);
    this.elements.paginationBottom.classList.toggle('hidden', !showPagination);
    
    if (!showPagination) return;
    
    // Update page info
    const pageInfo = `${this.currentPage} / ${this.totalPages}`;
    if (this.elements.pageInfoTop) this.elements.pageInfoTop.textContent = pageInfo;
    if (this.elements.pageInfoBottom) this.elements.pageInfoBottom.textContent = pageInfo;
    
    // Update button states
    const prevButtons = document.querySelectorAll('#prevPageTop, #prevPageBottom');
    const nextButtons = document.querySelectorAll('#nextPageTop, #nextPageBottom');
    
    prevButtons.forEach(btn => {
      btn.disabled = this.currentPage === 1;
    });
    
    nextButtons.forEach(btn => {
      btn.disabled = this.currentPage === this.totalPages || this.totalPages === 0;
    });
  }
  
  scrollToResults() {
    const resultsSection = document.getElementById('results');
    if (resultsSection) {
      resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }
  
  // Chart initialization and updates
  initCharts() {
    const ctxResults = this.elements.chartResults;
    const ctxBTTS = this.elements.chartBTTS;
    
    if (!ctxResults || !ctxBTTS) return;
    
    // Results chart
    this.chartResults = new Chart(ctxResults, {
      type: 'bar',
      data: {
        labels: ['Hazai', 'Döntetlen', 'Vendég'],
        datasets: [{
          label: 'Darab',
          data: [0, 0, 0],
          backgroundColor: ['#34d39955', '#fbbf2455', '#60a5fa55'],
          borderColor: ['#34d399', '#fbbf24', '#60a5fa'],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false }
        },
        scales: {
          x: {
            grid: { color: 'rgba(255,255,255,0.06)' },
            ticks: { color: 'rgba(228,228,231,0.9)', font: { size: 12 } }
          },
          y: {
            beginAtZero: true,
            grid: { color: 'rgba(255,255,255,0.06)' },
            ticks: { color: 'rgba(228,228,231,0.9)', stepSize: 1 }
          }
        }
      }
    });
    
    // BTTS chart
    this.chartBTTS = new Chart(ctxBTTS, {
      type: 'doughnut',
      data: {
        labels: ['Igen', 'Nem'],
        datasets: [{
          data: [0, 0],
          backgroundColor: ['#a78bfa88', '#ffffff22'],
          borderColor: ['#a78bfa', '#e5e7eb33'],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            labels: {
              color: 'rgba(228,228,231,0.9)',
              boxWidth: 12
            }
          }
        },
        cutout: '60%'
      }
    });
  }
  
  updateCharts() {
    if (!this.chartResults || !this.chartBTTS) return;
    
    const matches = this.filteredMatches;
    const home = matches.filter(m => m.res === 'H').length;
    const draw = matches.filter(m => m.res === 'D').length;
    const away = matches.filter(m => m.res === 'A').length;
    const bttsYes = matches.filter(m => m.btts).length;
    const bttsNo = matches.length - bttsYes;
    
    // Update results chart
    this.chartResults.data.datasets[0].data = [home, draw, away];
    this.chartResults.update();
    
    // Update BTTS chart
    this.chartBTTS.data.datasets[0].data = [bttsYes, bttsNo];
    this.chartBTTS.update();
  }
  
  resetFilters() {
    this.filters = {
      home: null,
      away: null,
      btts: null,
      comeback: null
    };
    
    this.sortBy = null;
    this.sortOrder = 'asc';
    this.currentPage = 1;
    
    // Reset dropdown labels
    const dropdowns = [
      { selector: '[data-dropdown="home"] [data-label]', text: 'Válassz hazai csapatot' },
      { selector: '[data-dropdown="away"] [data-label]', text: 'Válassz vendég csapatot' },
      { selector: '[data-dropdown="btts"] [data-label]', text: 'Válassz: Igen / Nem' },
      { selector: '[data-dropdown="comeback"] [data-label]', text: 'Válassz: Igen / Nem' }
    ];
    
    dropdowns.forEach(({ selector, text }) => {
      const element = document.querySelector(selector);
      if (element) element.textContent = text;
    });
    
    this.updateSortIndicators();
    this.clearFiltersFromStorage();
    this.applyFilters();
  }
  
  exportCSV() {
    if (this.filteredMatches.length === 0) return;
    
    const header = [
      'Hazai csapat', 'Vendég csapat', 'Félidő eredmény', 
      'Végeredmény', 'Mindkét csapat gólt szerzett', 'Fordítás'
    ];
    
    const rows = [header];
    
    this.filteredMatches.forEach(match => {
      const row = [
        match.home,
        match.away,
        match.ht,
        match.ft,
        match.btts ? 'Igen' : 'Nem',
        match.comeback ? 'Igen' : 'Nem'
      ];
      
      // Escape CSV values
      const escapedRow = row.map(value => `"${String(value).replace(/"/g, '""')}"`);
      rows.push(escapedRow);
    });
    
    const csvContent = '\ufeff' + rows.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `winmix_merkozesek_${new Date().toISOString().slice(0, 10)}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showSuccess('CSV fájl letöltve!');
  }
  
  // Extended statistics modal
  showExtendedStats() {
    const matches = this.filteredMatches;
    const total = matches.length;
    
    if (total === 0) {
      this.showInfo('Nincs adat a bővített statisztikához. Alkalmazz szűrőket vagy töltsd be az adatokat.');
      return;
    }
    
    // Calculate statistics
    let homeWins = 0, draws = 0, awayWins = 0;
    let totalHomeGoals = 0, totalAwayGoals = 0, bttsCount = 0;
    const resultCounts = {};
    
    matches.forEach(match => {
      const [homeGoals, awayGoals] = match.ft.split('-').map(n => parseInt(n, 10));
      
      totalHomeGoals += homeGoals;
      totalAwayGoals += awayGoals;
      
      if (match.res === 'H') homeWins++;
      else if (match.res === 'A') awayWins++;
      else draws++;
      
      if (match.btts) bttsCount++;
      
      resultCounts[match.ft] = (resultCounts[match.ft] || 0) + 1;
    });
    
    const homeAvg = total ? (totalHomeGoals / total).toFixed(2) : '0.0';
    const awayAvg = total ? (totalAwayGoals / total).toFixed(2) : '0.0';
    const bttsPercent = total ? ((bttsCount / total) * 100).toFixed(1) : '0';
    
    // Update modal content
    document.getElementById('totalMatches').textContent = total;
    document.getElementById('homeWins').textContent = homeWins;
    document.getElementById('draws').textContent = draws;
    document.getElementById('awayWins').textContent = awayWins;
    document.getElementById('homeGoalAvg').textContent = homeAvg;
    document.getElementById('awayGoalAvg').textContent = awayAvg;
    
    const bttsElement = document.getElementById('bothTeamsScored');
    bttsElement.innerHTML = `Összes mérkőzésből hány mérkőzésen szerzett mind a két csapat gólt: <span class="font-semibold">${bttsPercent}%</span>`;
    
    // Update frequent results
    const frequentList = document.getElementById('frequentResultsList');
    frequentList.innerHTML = '';
    
    const sortedResults = Object.entries(resultCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    
    if (sortedResults.length > 0) {
      sortedResults.forEach(([result, count]) => {
        const li = document.createElement('li');
        li.textContent = `${result} - ${count} alkalommal`;
        frequentList.appendChild(li);
      });
    } else {
      frequentList.innerHTML = '<li class="text-zinc-400 italic">Nincs adat</li>';
    }
    
    // Update team info
    this.updateModalTeamInfo();
    
    // Show modal
    this.elements.extendedStatsModal.classList.remove('hidden');
    lucide.createIcons();
  }
  
  updateModalTeamInfo() {
    const homeTeamInfo = document.getElementById('homeTeamInfo');
    const awayTeamInfo = document.getElementById('awayTeamInfo');
    
    const homeTeam = this.filters.home || 'Nincs kiválasztva';
    const awayTeam = this.filters.away || 'Nincs kiválasztva';
    
    // Update home team
    const homeLogo = homeTeamInfo.querySelector('img');
    const homeNameDiv = homeTeamInfo.querySelector('.font-medium');
    if (homeLogo && homeNameDiv) {
      homeLogo.src = this.filters.home ? this.getTeamLogo(this.filters.home) : 'https://via.placeholder.com/40x40?text=?';
      homeNameDiv.textContent = homeTeam;
    }
    
    // Update away team
    const awayLogo = awayTeamInfo.querySelector('img');
    const awayNameDiv = awayTeamInfo.querySelector('.font-medium');
    if (awayLogo && awayNameDiv) {
      awayLogo.src = this.filters.away ? this.getTeamLogo(this.filters.away) : 'https://via.placeholder.com/40x40?text=?';
      awayNameDiv.textContent = awayTeam;
    }
  }
  
  hideExtendedStats() {
    this.elements.extendedStatsModal.classList.add('hidden');
  }
  
  // Storage methods
  saveFiltersToStorage() {
    try {
      const data = {
        filters: this.filters,
        itemsPerPage: this.itemsPerPage,
        sortBy: this.sortBy,
        sortOrder: this.sortOrder
      };
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));
    } catch (error) {
      console.warn('Could not save filters to storage:', error);
    }
  }
  
  loadStoredFilters() {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return;
      
      const data = JSON.parse(stored);
      
      // Restore filters
      if (data.filters) {
        this.filters = { ...this.filters, ...data.filters };
      }
      
      // Restore settings
      if (data.itemsPerPage) {
        this.itemsPerPage = data.itemsPerPage;
        if (this.elements.itemsPerPage) {
          this.elements.itemsPerPage.value = data.itemsPerPage;
        }
      }
      
      if (data.sortBy) {
        this.sortBy = data.sortBy;
        this.sortOrder = data.sortOrder || 'asc';
      }
      
    } catch (error) {
      console.warn('Could not load stored filters:', error);
    }
  }
  
  saveSettingsToStorage() {
    this.saveFiltersToStorage();
  }
  
  clearFiltersFromStorage() {
    try {
      localStorage.removeItem(this.STORAGE_KEY);
    } catch (error) {
      console.warn('Could not clear filters from storage:', error);
    }
  }
  
  // UI feedback methods
  showLoading() {
    if (this.elements.loadingOverlay) {
      this.elements.loadingOverlay.classList.remove('hidden');
      this.elements.loadingOverlay.classList.add('flex');
    }
  }
  
  hideLoading() {
    if (this.elements.loadingOverlay) {
      this.elements.loadingOverlay.classList.add('hidden');
      this.elements.loadingOverlay.classList.remove('flex');
    }
  }
  
  showError(message) {
    this.showToast(message, 'error');
  }
  
  showSuccess(message) {
    this.showToast(message, 'success');
  }
  
  showInfo(message) {
    this.showToast(message, 'info');
  }
  
  showToast(message, type = 'info') {
    if (!this.elements.toastContainer) return;
    
    const toast = document.createElement('div');
    toast.className = 'toast animate-pulse rounded-lg ring-1 px-4 py-3 shadow-xl';
    
    let iconName = 'info';
    let colorClasses = 'ring-blue-400/30 bg-blue-500/10 text-blue-200';
    
    switch (type) {
      case 'error':
        iconName = 'alert-triangle';
        colorClasses = 'ring-red-400/30 bg-red-500/10 text-red-200';
        break;
      case 'success':
        iconName = 'check-circle';
        colorClasses = 'ring-green-400/30 bg-green-500/10 text-green-200';
        break;
      case 'info':
      default:
        iconName = 'info';
        colorClasses = 'ring-blue-400/30 bg-blue-500/10 text-blue-200';
        break;
    }
    
    toast.className += ` ${colorClasses}`;
    
    toast.innerHTML = `
      <div class="flex items-center gap-2">
        <i data-lucide="${iconName}" style="width:18px; height:18px;"></i>
        <span class="text-sm">${message}</span>
        <button class="ml-auto hover:opacity-70">
          <i data-lucide="x" style="width:16px; height:16px;"></i>
        </button>
      </div>
    `;
    
    // Close button functionality
    const closeBtn = toast.querySelector('button');
    closeBtn.addEventListener('click', () => {
      toast.remove();
    });
    
    this.elements.toastContainer.appendChild(toast);
    lucide.createIcons();
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (toast.parentNode) {
        toast.remove();
      }
    }, 5000);
  }
  
  // Utility methods
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  // Performance optimization for large datasets
  createVirtualScrolling() {
    // This would be implemented for very large datasets
    // For now, pagination handles the performance concerns
  }
  
  // Error boundary
  handleError(error, context = 'Unknown') {
    console.error(`Error in ${context}:`, error);
    this.showError(`Hiba történt: ${context}. Részletek a konzolban.`);
  }
  
  // Cleanup method
  destroy() {
    // Clean up event listeners and resources
    if (this.chartResults) {
      this.chartResults.destroy();
    }
    
    if (this.chartBTTS) {
      this.chartBTTS.destroy();
    }
    
    // Remove event listeners
    document.removeEventListener('click', this.globalClickHandler);
  }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  try {
    window.winmixApp = new WinMixApp();
  } catch (error) {
    console.error('Failed to initialize WinMix application:', error);
    
    // Show error message to user
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 z-50 bg-red-500/10 border border-red-400/30 text-red-200 px-4 py-3 rounded-lg';
    errorDiv.innerHTML = `
      <div class="flex items-center gap-2">
        <span>⚠️</span>
        <span>Hiba történt az alkalmazás betöltése során.</span>
      </div>
    `;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
      errorDiv.remove();
    }, 10000);
  }
});

// Global error handler
window.addEventListener('error', (event) => {
  console.error('Global error:', event.error);
  if (window.winmixApp) {
    window.winmixApp.showError('Váratlan hiba történt. Frissítsd az oldalt.');
  }
});

// Handle unhandled promise rejections
window.addEventListener('unhandledrejection', (event) => {
  console.error('Unhandled promise rejection:', event.reason);
  if (window.winmixApp) {
    window.winmixApp.showError('Hálózati hiba történt. Ellenőrizd az internetkapcsolatot.');
  }
});

// Export for potential external use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = WinMixApp;
}
```
```index.css
/* PLEASE NOTE: THESE TAILWIND IMPORTS SHOULD NEVER BE DELETED */
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
/* DO NOT DELETE THESE TAILWIND IMPORTS, OTHERWISE THE STYLING WILL NOT RENDER AT ALL */
/* WinMix - Custom Styles */
body {
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  -webkit-tap-highlight-color: transparent;
}
/* Custom scrollbar for dark theme */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.3);
}
/* Loading spinner animation */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
.animate-spin {
  animation: spin 1s linear infinite;
}
/* Smooth transitions for all interactive elements */
button, .hover\:bg-white\/5:hover, .hover\:text-zinc-200:hover {
  transition: all 0.15s ease-in-out;
}
/* Table row hover effects */
tbody tr:hover {
  background: rgba(255, 255, 255, 0.05);
  transform: translateY(-1px);
  transition: all 0.15s ease-in-out;
}
/* Custom gradient button effects */
.group:hover .group-hover\:bg-transparent {
  background: transparent;
}
/* Pagination button styles */
.pagination-btn {
  transition: all 0.2s ease-in-out;
}
.pagination-btn:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(139, 92, 246, 0.25);
}
.pagination-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}
/* Enhanced dropdown animations */
[data-menu] {
  transition: all 0.2s ease-in-out;
  transform-origin: top;
}
[data-menu].hidden {
  opacity: 0;
  transform: scaleY(0.95) translateY(-10px);
}
[data-menu]:not(.hidden) {
  opacity: 1;
  transform: scaleY(1) translateY(0);
}
/* Stats card hover effects */
.stats-card {
  transition: all 0.2s ease-in-out;
}
.stats-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(139, 92, 246, 0.15);
}
/* Modal animations */
#extendedStatsModal:not(.hidden) {
  animation: modalFadeIn 0.3s ease-out forwards;
}
@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
/* Toast notifications */
.toast {
  animation: slideInRight 0.3s ease-out forwards;
}
@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}
/* Table sorting indicators */
th[data-sort-key] {
  position: relative;
  user-select: none;
}
th[data-sort-key]:hover {
  background: rgba(255, 255, 255, 0.05);
}
th[data-sort-key].sorted-asc::after,
th[data-sort-key].sorted-desc::after {
  content: '';
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
  width: 0;
  height: 0;
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
}
th[data-sort-key].sorted-asc::after {
  border-bottom: 6px solid rgba(139, 92, 246, 0.8);
}
th[data-sort-key].sorted-desc::after {
  border-top: 6px solid rgba(139, 92, 246, 0.8);
}
/* Enhanced focus styles for accessibility */
button:focus-visible,
select:focus-visible,
a:focus-visible,
input:focus-visible {
  outline: 2px solid rgba(139, 92, 246, 0.6);
  outline-offset: 2px;
  border-radius: 6px;
}
/* Loading overlay backdrop blur effect */
#loadingOverlay {
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
}
/* Team logo error handling */
img[alt*="logo"] {
  object-fit: cover;
  background: rgba(255, 255, 255, 0.05);
}
/* Chart container responsive adjustments */
.chart-container {
  position: relative;
  height: 100%;
  min-height: 200px;
}
/* Custom select styling */
select {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 0.5rem center;
  background-repeat: no-repeat;
  background-size: 1.5em 1.5em;
  padding-right: 2.5rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}
/* Responsive table improvements */
@media (max-width: 768px) {
  .table-container {
    font-size: 0.875rem;
  }
  th, td {
    padding: 0.5rem 0.75rem !important;
  }
  .team-logo {
    width: 20px !important;
    height: 20px !important;
  }
}
/* Enhanced mobile pagination */
@media (max-width: 640px) {
  .pagination-controls {
    justify-content: center;
  }
}
/* Improved card grid responsiveness */
@media (min-width: 1280px) {
  .stats-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}
/* Dark theme enhancements */
.dark-glass {
  background: rgba(12, 15, 22, 0.8);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}
/* Gradient text effects */
.gradient-text {
  background: linear-gradient(135deg, #8b5cf6 0%, #06b6d4 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}
/* Enhanced button hover states */
.btn-primary {
  position: relative;
  overflow: hidden;
}
.btn-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transition: left 0.6s;
}
.btn-primary:hover::before {
  left: 100%;
}
/* Page transition effects */
.page-content {
  animation: fadeInUp 0.6s ease-out;
}
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
/* Filter dropdown improvements */
.dropdown-option:hover {
  background: rgba(139, 92, 246, 0.1);
  color: rgba(139, 92, 246, 1);
}
/* Error state styles */
.error-state {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  color: #fca5a5;
}
/* Success state styles */
.success-state {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.3);
  color: #86efac;
}
/* Loading skeleton animations */
.skeleton {
  background: linear-gradient(90deg, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.05) 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}
@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}
/* Mobile optimizations */
@media (max-width: 640px) {
  /* Increase touch targets */
  button, a {
    min-height: 44px;
    display: inline-flex;
    align-items: center;
  }
  /* Improve spacing on mobile */
  .page-content {
    padding-left: 16px;
    padding-right: 16px;
  }
  /* Enhance modal scrolling */
  #extendedStatsModal .modal-content {
    max-height: 90vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
  /* Better dropdown positioning */
  .dropdown-menu {
    position: fixed;
    left: 10px;
    right: 10px;
    max-width: calc(100% - 20px);
  }
}
/* Improve tap targets for mobile */
.tap-target {
  min-height: 44px;
  min-width: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
}
/* Mobile menu animation */
.mobile-menu-enter {
  opacity: 0;
  transform: translateY(-10px);
}
.mobile-menu-enter-active {
  opacity: 1;
  transform: translateY(0);
  transition: opacity 200ms, transform 200ms;
}
.mobile-menu-exit {
  opacity: 1;
}
.mobile-menu-exit-active {
  opacity: 0;
  transform: translateY(-10px);
  transition: opacity 200ms, transform 200ms;
}
/* Fix iframe performance on mobile */
.spline-container iframe {
  pointer-events: none;
}
@media (min-width: 768px) {
  .spline-container iframe {
    pointer-events: auto;
  }
}
/* New animations for match card expansions */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
.animate-fadeIn {
  animation: fadeIn 0.3s ease-out forwards;
}
/* Team stats hover effects */
.team-stat-card {
  transition: all 0.2s ease;
}
.team-stat-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 16px rgba(139, 92, 246, 0.15);
}
/* Match timeline animations */
.timeline-event {
  transition: all 0.3s ease;
}
.timeline-event:hover {
  transform: scale(1.05);
}
/* Form chart styles */
.form-indicator {
  position: relative;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 4px;
}
.form-win {
  background-color: rgba(16, 185, 129, 0.7);
}
.form-draw {
  background-color: rgba(245, 158, 11, 0.7);
}
.form-loss {
  background-color: rgba(239, 68, 68, 0.7);
}
/* Saved filter animations */
.filter-badge {
  transition: all 0.2s ease;
}
.filter-badge:hover {
  transform: translateY(-1px);
}
.filter-badge-delete {
  opacity: 0;
  transition: all 0.2s ease;
}
.filter-badge:hover .filter-badge-delete {
  opacity: 1;
}
```
```index.tsx
import './index.css'
import React from "react";
import { render } from "react-dom";
import { App } from "./App";

render(<App />, document.getElementById("root"));

```
```pages/Admin.tsx
import React, { useEffect, useState } from 'react'
import {
  ShieldIcon,
  SaveIcon,
  KeyIcon,
  LinkIcon,
  CheckCircleIcon,
  XCircleIcon,
  DatabaseIcon,
  InfoIcon,
  SettingsIcon,
  EyeIcon,
  EyeOffIcon,
  RefreshCwIcon,
  ArrowLeftIcon,
  UsersIcon,
} from 'lucide-react'
import { Link } from 'react-router-dom'
interface SupabaseConfig {
  url: string
  key: string
  isConnected: boolean
}
export const Admin: React.FC = () => {
  const [config, setConfig] = useState<SupabaseConfig>({
    url: '',
    key: '',
    isConnected: false,
  })
  const [loading, setLoading] = useState(false)
  const [testStatus, setTestStatus] = useState<
    'idle' | 'testing' | 'success' | 'error'
  >('idle')
  const [showKey, setShowKey] = useState(false)
  const [testMessage, setTestMessage] = useState('')
  // Load config from localStorage on mount
  useEffect(() => {
    const savedConfig = localStorage.getItem('winmix_supabase_config')
    if (savedConfig) {
      try {
        const parsedConfig = JSON.parse(savedConfig)
        setConfig({
          url: parsedConfig.url || '',
          key: parsedConfig.key || '',
          isConnected: parsedConfig.isConnected || false,
        })
      } catch (error) {
        console.error('Error parsing saved config:', error)
      }
    }
  }, [])
  const handleSaveConfig = () => {
    setLoading(true)
    // Validate inputs
    if (!config.url || !config.key) {
      setTestStatus('error')
      setTestMessage('Kérjük, add meg az URL-t és az API kulcsot')
      setLoading(false)
      return
    }
    // In a real app, we would test the connection here
    // For now, we'll just simulate a successful connection
    setTimeout(() => {
      const success = Math.random() > 0.2 // 80% success rate for demo
      if (success) {
        const newConfig = {
          ...config,
          isConnected: true,
        }
        // Save to localStorage
        localStorage.setItem(
          'winmix_supabase_config',
          JSON.stringify(newConfig),
        )
        setConfig(newConfig)
        setTestStatus('success')
        setTestMessage('Sikeres kapcsolódás a Supabase adatbázishoz')
      } else {
        setTestStatus('error')
        setTestMessage(
          'Nem sikerült kapcsolódni a Supabase adatbázishoz. Ellenőrizd az adatokat.',
        )
      }
      setLoading(false)
    }, 1500)
  }
  const handleTestConnection = () => {
    setTestStatus('testing')
    // Simulate testing the connection
    setTimeout(() => {
      const success = config.url && config.key && Math.random() > 0.3 // 70% success rate for demo
      if (success) {
        setTestStatus('success')
        setTestMessage('Sikeres kapcsolódás a Supabase adatbázishoz')
      } else {
        setTestStatus('error')
        setTestMessage(
          'Nem sikerült kapcsolódni a Supabase adatbázishoz. Ellenőrizd az adatokat.',
        )
      }
    }, 1500)
  }
  const handleReset = () => {
    localStorage.removeItem('winmix_supabase_config')
    setConfig({
      url: '',
      key: '',
      isConnected: false,
    })
    setTestStatus('idle')
    setTestMessage('')
  }
  return (
    <div className="min-h-screen bg-[#0a0a12] text-zinc-100">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-10 sm:py-14">
        <div className="text-center space-y-3 mb-10">
          <h1 className="text-4xl sm:text-5xl font-semibold tracking-tight text-white">
            Admin Panel
          </h1>
          <p className="max-w-2xl mx-auto text-sm sm:text-base text-zinc-300">
            Állítsd be a Supabase kapcsolatot az alkalmazáshoz
          </p>
        </div>
        <div className="bg-white/5 ring-1 ring-white/10 rounded-2xl overflow-hidden">
          <div className="p-6 border-b border-white/10">
            <div className="flex items-center gap-3">
              <div className="h-10 w-10 rounded-full bg-violet-500/20 flex items-center justify-center">
                <ShieldIcon className="h-5 w-5 text-violet-400" />
              </div>
              <h2 className="text-xl font-medium text-white">
                Supabase Konfiguráció
              </h2>
            </div>
          </div>
          <div className="p-6">
            <div className="space-y-6">
              <div className="space-y-1">
                <label
                  htmlFor="supabase-url"
                  className="block text-sm font-medium text-zinc-300"
                >
                  Supabase URL
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <LinkIcon className="h-5 w-5 text-zinc-400" />
                  </div>
                  <input
                    id="supabase-url"
                    type="url"
                    value={config.url}
                    onChange={(e) =>
                      setConfig({
                        ...config,
                        url: e.target.value,
                      })
                    }
                    className="block w-full pl-10 pr-3 py-3 border-0 rounded-xl bg-white/5 ring-1 ring-white/10 focus:ring-violet-500 focus:outline-none text-zinc-200 placeholder-zinc-400"
                    placeholder="https://your-project.supabase.co"
                  />
                </div>
                <p className="text-xs text-zinc-400 mt-1">
                  A Supabase projekt URL-je, amelyet a Supabase Dashboard-on
                  találsz
                </p>
              </div>
              <div className="space-y-1">
                <label
                  htmlFor="supabase-key"
                  className="block text-sm font-medium text-zinc-300"
                >
                  Supabase Anon Key
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <KeyIcon className="h-5 w-5 text-zinc-400" />
                  </div>
                  <input
                    id="supabase-key"
                    type={showKey ? 'text' : 'password'}
                    value={config.key}
                    onChange={(e) =>
                      setConfig({
                        ...config,
                        key: e.target.value,
                      })
                    }
                    className="block w-full pl-10 pr-10 py-3 border-0 rounded-xl bg-white/5 ring-1 ring-white/10 focus:ring-violet-500 focus:outline-none text-zinc-200 placeholder-zinc-400"
                    placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowKey(!showKey)}
                  >
                    {showKey ? (
                      <EyeOffIcon className="h-5 w-5 text-zinc-400" />
                    ) : (
                      <EyeIcon className="h-5 w-5 text-zinc-400" />
                    )}
                  </button>
                </div>
                <p className="text-xs text-zinc-400 mt-1">
                  Az anonim kulcs, amelyet a Supabase API beállításoknál találsz
                </p>
              </div>
              {testStatus === 'success' && (
                <div className="bg-emerald-500/10 border border-emerald-500/30 rounded-lg p-4 flex items-start gap-3">
                  <CheckCircleIcon className="h-5 w-5 text-emerald-400 mt-0.5 flex-shrink-0" />
                  <div>
                    <h3 className="text-sm font-medium text-emerald-400">
                      Sikeres kapcsolódás
                    </h3>
                    <p className="text-xs text-emerald-300/80 mt-1">
                      {testMessage}
                    </p>
                  </div>
                </div>
              )}
              {testStatus === 'error' && (
                <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 flex items-start gap-3">
                  <XCircleIcon className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />
                  <div>
                    <h3 className="text-sm font-medium text-red-400">
                      Kapcsolódási hiba
                    </h3>
                    <p className="text-xs text-red-300/80 mt-1">
                      {testMessage}
                    </p>
                  </div>
                </div>
              )}
              <div className="bg-white/5 border border-white/10 rounded-lg p-4">
                <h3 className="text-sm font-medium text-zinc-200 flex items-center gap-2 mb-3">
                  <InfoIcon className="h-4 w-4 text-zinc-400" />
                  Kapcsolat állapota
                </h3>
                <div className="flex items-center gap-2">
                  <div
                    className={`h-3 w-3 rounded-full ${config.isConnected ? 'bg-emerald-500' : 'bg-zinc-500'}`}
                  ></div>
                  <span className="text-sm text-zinc-300">
                    {config.isConnected ? 'Kapcsolódva' : 'Nincs kapcsolat'}
                  </span>
                </div>
                {config.isConnected && (
                  <div className="mt-2 text-xs text-zinc-400">
                    Utoljára mentve: {new Date().toLocaleString()}
                  </div>
                )}
              </div>
              <div className="pt-4 flex flex-wrap gap-3">
                <button
                  type="button"
                  onClick={handleSaveConfig}
                  disabled={loading}
                  className="inline-flex items-center gap-2 text-sm font-semibold tracking-tight text-white bg-gradient-to-br from-violet-500 to-indigo-600 rounded-full px-4 py-2.5 shadow-lg hover:shadow-[0_12px_24px_-6px_rgba(139,92,246,0.4)] hover:-translate-y-0.5 transform-gpu transition disabled:opacity-50"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin h-4 w-4 border-2 border-white rounded-full border-t-transparent"></div>
                      <span>Mentés...</span>
                    </>
                  ) : (
                    <>
                      <SaveIcon size={16} />
                      <span>Beállítások mentése</span>
                    </>
                  )}
                </button>
                <button
                  type="button"
                  onClick={handleTestConnection}
                  disabled={
                    testStatus === 'testing' || !config.url || !config.key
                  }
                  className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5 disabled:opacity-50"
                >
                  {testStatus === 'testing' ? (
                    <>
                      <div className="animate-spin h-4 w-4 border-2 border-zinc-300 rounded-full border-t-transparent"></div>
                      <span>Tesztelés...</span>
                    </>
                  ) : (
                    <>
                      <DatabaseIcon size={16} />
                      <span>Kapcsolat tesztelése</span>
                    </>
                  )}
                </button>
                <button
                  type="button"
                  onClick={handleReset}
                  className="inline-flex items-center gap-2 text-sm font-medium text-zinc-400 border border-white/5 rounded-full px-4 py-2.5 hover:bg-white/5 hover:text-zinc-300"
                >
                  <RefreshCwIcon size={16} />
                  <span>Alaphelyzet</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div className="mt-8 flex justify-between items-center">
          <Link
            to="/"
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            <ArrowLeftIcon size={16} />
            Vissza a főoldalra
          </Link>
          <Link
            to="/teams"
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            <UsersIcon size={16} />
            Csapatok megtekintése
          </Link>
        </div>
      </div>
    </div>
  )
}

```
```pages/MatchDetails.tsx
import React, { useEffect, useState, Component } from 'react'
import { useParams, Link } from 'react-router-dom'
import {
  ArrowLeftIcon,
  ClockIcon,
  TrophyIcon,
  BarChart4Icon,
  GoalIcon,
  ShuffleIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CalendarIcon,
  InfoIcon,
} from 'lucide-react'
import { Match } from '../utils/supabaseClient'
export const MatchDetails: React.FC = () => {
  const { matchId } = useParams<{
    matchId: string
  }>()
  const [match, setMatch] = useState<Match | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  useEffect(() => {
    const fetchMatchDetails = async () => {
      try {
        setLoading(true)
        // In a real app, this would be a proper API call
        // For now, we'll simulate fetching from localStorage or a mock
        setTimeout(() => {
          // Mock data for demonstration
          const mockMatch: Match = {
            id: parseInt(matchId || '0'),
            home: 'Ferencváros',
            away: 'Újpest FC',
            homeTeam: {
              id: 1,
              name: 'Ferencváros',
              logoUrl:
                'https://upload.wikimedia.org/wikipedia/en/5/5c/Ferencv%C3%A1rosi_TC.svg',
            },
            awayTeam: {
              id: 2,
              name: 'Újpest FC',
              logoUrl:
                'https://upload.wikimedia.org/wikipedia/en/5/51/%C3%9Ajpest_FC.svg',
            },
            ht: '1 - 0',
            ft: '2 - 1',
            btts: true,
            comeback: false,
            homeGoals: 2,
            awayGoals: 1,
          }
          setMatch(mockMatch)
          setLoading(false)
        }, 800)
      } catch (err) {
        console.error('Error fetching match details:', err)
        setError('Hiba történt a mérkőzés adatainak betöltése közben')
        setLoading(false)
      }
    }
    fetchMatchDetails()
  }, [matchId])
  if (loading) {
    return (
      <div className="min-h-screen bg-[#0a0a12] text-zinc-100 flex items-center justify-center">
        <div className="animate-spin h-8 w-8 border-4 border-violet-500 rounded-full border-t-transparent"></div>
      </div>
    )
  }
  if (error || !match) {
    return (
      <div className="min-h-screen bg-[#0a0a12] text-zinc-100 flex flex-col items-center justify-center p-4">
        <div className="text-red-400 mb-4">
          {error || 'Mérkőzés nem található'}
        </div>
        <Link
          to="/"
          className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
        >
          <ArrowLeftIcon size={16} />
          Vissza a főoldalra
        </Link>
      </div>
    )
  }
  // Calculate additional statistics
  const totalGoals = match.homeGoals + match.awayGoals
  const [htHomeGoals, htAwayGoals] = match.ht.split(' - ').map(Number)
  const htTotalGoals = htHomeGoals + htAwayGoals
  const secondHalfGoals = totalGoals - htTotalGoals
  // Create timeline events (in a real app, this would come from the API)
  const timelineEvents = [
    {
      time: 23,
      team: 'home',
      type: 'goal',
      player: 'Tokmac Nguen',
    },
    {
      time: 58,
      team: 'away',
      type: 'goal',
      player: 'Stieber Zoltán',
    },
    {
      time: 76,
      team: 'home',
      type: 'goal',
      player: 'Myrto Uzuni',
    },
  ]
  return (
    <div className="min-h-screen bg-[#0a0a12] text-zinc-100">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        {/* Back navigation */}
        <div className="mb-6">
          <Link
            to="/"
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            <ArrowLeftIcon size={16} />
            Vissza a mérkőzésekhez
          </Link>
        </div>
        {/* Match header */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-2xl p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-center">
            {/* Home team */}
            <div className="flex flex-col items-center text-center">
              <img
                src={match.homeTeam.logoUrl}
                alt={`${match.home} logo`}
                className="w-20 h-20 rounded-full object-cover mb-3 ring-1 ring-white/10"
              />
              <Link
                to={`/team/${encodeURIComponent(match.home)}`}
                className="text-xl font-semibold hover:text-violet-300"
              >
                {match.home}
              </Link>
            </div>
            {/* Score */}
            <div className="flex flex-col items-center text-center">
              <div className="text-xs text-zinc-400 mb-1 flex items-center gap-1">
                <CalendarIcon size={12} />
                <span>Mérkőzés #{match.id}</span>
              </div>
              <div className="text-4xl font-bold mb-2">
                {match.homeGoals} - {match.awayGoals}
              </div>
              <div className="text-sm text-zinc-400">Félidő: {match.ht}</div>
              <div className="mt-4 flex gap-3">
                {match.btts && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs bg-violet-500/10 text-violet-300 ring-1 ring-violet-400/30">
                    <GoalIcon size={12} />
                    BTTS
                  </span>
                )}
                {match.comeback && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs bg-amber-500/10 text-amber-300 ring-1 ring-amber-400/30">
                    <ShuffleIcon size={12} />
                    Fordítás
                  </span>
                )}
              </div>
            </div>
            {/* Away team */}
            <div className="flex flex-col items-center text-center">
              <img
                src={match.awayTeam.logoUrl}
                alt={`${match.away} logo`}
                className="w-20 h-20 rounded-full object-cover mb-3 ring-1 ring-white/10"
              />
              <Link
                to={`/team/${encodeURIComponent(match.away)}`}
                className="text-xl font-semibold hover:text-violet-300"
              >
                {match.away}
              </Link>
            </div>
          </div>
        </div>
        {/* Match statistics */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* Goals statistics */}
          <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <BarChart4Icon size={18} />
              Gól statisztikák
            </h3>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm text-zinc-400 mb-1">
                  <span>Összes gól</span>
                  <span>{totalGoals}</span>
                </div>
                <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-gradient-to-r from-violet-500 to-indigo-600"
                    style={{
                      width: `${(totalGoals / 10) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
              <div>
                <div className="flex justify-between text-sm text-zinc-400 mb-1">
                  <span>Első félidő</span>
                  <span>{htTotalGoals}</span>
                </div>
                <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-gradient-to-r from-emerald-500 to-green-600"
                    style={{
                      width: `${(htTotalGoals / totalGoals) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
              <div>
                <div className="flex justify-between text-sm text-zinc-400 mb-1">
                  <span>Második félidő</span>
                  <span>{secondHalfGoals}</span>
                </div>
                <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-gradient-to-r from-amber-500 to-orange-600"
                    style={{
                      width: `${(secondHalfGoals / totalGoals) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
              <div className="pt-2 border-t border-white/10">
                <div className="flex justify-between text-sm text-zinc-400 mb-1">
                  <span>Gólok megoszlása</span>
                  <span>
                    {match.homeGoals} - {match.awayGoals}
                  </span>
                </div>
                <div className="h-3 bg-white/10 rounded-full overflow-hidden flex">
                  <div
                    className="h-full bg-emerald-500"
                    style={{
                      width: `${(match.homeGoals / totalGoals) * 100}%`,
                    }}
                  ></div>
                  <div
                    className="h-full bg-sky-500"
                    style={{
                      width: `${(match.awayGoals / totalGoals) * 100}%`,
                    }}
                  ></div>
                </div>
                <div className="flex justify-between mt-2 text-xs">
                  <span className="text-emerald-400">{match.home}</span>
                  <span className="text-sky-400">{match.away}</span>
                </div>
              </div>
            </div>
          </div>
          {/* Match timeline */}
          <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <ClockIcon size={18} />
              Mérkőzés idővonal
            </h3>
            <div className="relative pl-8 pb-1">
              {/* Timeline line */}
              <div className="absolute left-3 top-0 bottom-0 w-0.5 bg-white/10"></div>
              {/* Timeline events */}
              {timelineEvents.map((event, index) => (
                <div
                  key={index}
                  className={`relative mb-6 timeline-event ${event.team === 'home' ? 'pr-4' : 'pr-4'}`}
                >
                  {/* Timeline dot */}
                  <div
                    className={`absolute left-3 top-0 w-3 h-3 rounded-full -translate-x-1.5 ${event.type === 'goal' ? 'bg-emerald-500' : 'bg-amber-500'}`}
                  ></div>
                  {/* Event content */}
                  <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                    <div className="flex items-center justify-between mb-1">
                      <div className="flex items-center gap-2">
                        <span className="inline-flex items-center justify-center w-6 h-6 rounded-full bg-white/10 text-xs font-medium">
                          {event.time}'
                        </span>
                        <span
                          className={`text-sm font-medium ${event.team === 'home' ? 'text-emerald-400' : 'text-sky-400'}`}
                        >
                          {event.team === 'home' ? match.home : match.away}
                        </span>
                      </div>
                      <GoalIcon size={16} className="text-amber-400" />
                    </div>
                    <p className="text-sm text-zinc-300">
                      {event.type === 'goal' ? 'Gól' : 'Esemény'}:{' '}
                      {event.player}
                    </p>
                  </div>
                </div>
              ))}
              {/* Half time marker */}
              <div className="relative mb-6">
                <div className="absolute left-3 top-0 w-3 h-3 rounded-full -translate-x-1.5 bg-violet-500"></div>
                <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                  <p className="text-sm text-zinc-300">Félidő: {match.ht}</p>
                </div>
              </div>
              {/* Full time marker */}
              <div className="relative">
                <div className="absolute left-3 top-0 w-3 h-3 rounded-full -translate-x-1.5 bg-indigo-500"></div>
                <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                  <p className="text-sm text-zinc-300">
                    Végeredmény: {match.ft}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* Team comparison */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4 mb-6">
          <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
            <TrophyIcon size={18} />
            Csapat összehasonlítás
          </h3>
          <div className="grid grid-cols-3 gap-2">
            {/* Headers */}
            <div className="text-center font-medium text-emerald-400">
              {match.home}
            </div>
            <div className="text-center text-sm text-zinc-400">Mutató</div>
            <div className="text-center font-medium text-sky-400">
              {match.away}
            </div>
            {/* Possession */}
            <div className="text-center text-lg">55%</div>
            <div className="text-center text-sm text-zinc-400">
              Labdabirtoklás
            </div>
            <div className="text-center text-lg">45%</div>
            {/* Shots */}
            <div className="text-center text-lg">12</div>
            <div className="text-center text-sm text-zinc-400">Lövések</div>
            <div className="text-center text-lg">8</div>
            {/* Shots on target */}
            <div className="text-center text-lg">5</div>
            <div className="text-center text-sm text-zinc-400">
              Kapura lövések
            </div>
            <div className="text-center text-lg">3</div>
            {/* Corners */}
            <div className="text-center text-lg">7</div>
            <div className="text-center text-sm text-zinc-400">Szögletek</div>
            <div className="text-center text-lg">4</div>
            {/* Fouls */}
            <div className="text-center text-lg">10</div>
            <div className="text-center text-sm text-zinc-400">
              Szabálytalanságok
            </div>
            <div className="text-center text-lg">12</div>
          </div>
        </div>
        {/* Head to head history */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4 mb-6">
          <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
            <InfoIcon size={18} />
            Korábbi mérkőzések
          </h3>
          <div className="space-y-3">
            {/* Previous match examples */}
            <div className="bg-white/5 hover:bg-white/10 transition rounded-lg p-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <span className="text-xs text-zinc-400">2023.10.15</span>
                  <div className="flex items-center gap-1">
                    <span className="font-medium">{match.home}</span>
                    <span className="text-zinc-400">vs</span>
                    <span>{match.away}</span>
                  </div>
                </div>
                <div className="text-zinc-300">3 - 1</div>
              </div>
            </div>
            <div className="bg-white/5 hover:bg-white/10 transition rounded-lg p-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <span className="text-xs text-zinc-400">2023.05.21</span>
                  <div className="flex items-center gap-1">
                    <span>{match.away}</span>
                    <span className="text-zinc-400">vs</span>
                    <span className="font-medium">{match.home}</span>
                  </div>
                </div>
                <div className="text-zinc-300">0 - 2</div>
              </div>
            </div>
            <div className="bg-white/5 hover:bg-white/10 transition rounded-lg p-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <span className="text-xs text-zinc-400">2022.11.06</span>
                  <div className="flex items-center gap-1">
                    <span className="font-medium">{match.home}</span>
                    <span className="text-zinc-400">vs</span>
                    <span>{match.away}</span>
                  </div>
                </div>
                <div className="text-zinc-300">1 - 1</div>
              </div>
            </div>
          </div>
        </div>
        {/* Navigation between matches */}
        <div className="flex justify-between mt-8">
          <Link
            to={`/match/${parseInt(matchId || '0') - 1}`}
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            <ChevronLeftIcon size={16} />
            Előző mérkőzés
          </Link>
          <Link
            to={`/match/${parseInt(matchId || '0') + 1}`}
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            Következő mérkőzés
            <ChevronRightIcon size={16} />
          </Link>
        </div>
      </div>
    </div>
  )
}

```
```pages/Teams.tsx
import React, { useEffect, useState, Component } from 'react'
import { Link } from 'react-router-dom'
import {
  UsersIcon,
  ShieldIcon,
  TrophyIcon,
  SearchIcon,
  InfoIcon,
  XIcon,
  StarIcon,
  BarChart4Icon,
  SwordIcon,
  ShieldCheckIcon,
  ZapIcon,
} from 'lucide-react'
import { Team, fetchTeams } from '../utils/supabaseClient'
export const Teams: React.FC = () => {
  const [teams, setTeams] = useState<Team[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  // Mock team strengths data (in a real app, this would come from the API)
  const teamStrengths: Record<
    string,
    {
      attack: number
      defense: number
      midfield: number
      speed: number
      technique: number
    }
  > = {
    Ferencváros: {
      attack: 85,
      defense: 82,
      midfield: 80,
      speed: 78,
      technique: 83,
    },
    'Újpest FC': {
      attack: 75,
      defense: 74,
      midfield: 73,
      speed: 76,
      technique: 72,
    },
    Debrecen: {
      attack: 72,
      defense: 70,
      midfield: 68,
      speed: 71,
      technique: 69,
    },
    'Puskás Akadémia': {
      attack: 78,
      defense: 75,
      midfield: 77,
      speed: 74,
      technique: 76,
    },
    'MTK Budapest': {
      attack: 70,
      defense: 69,
      midfield: 72,
      speed: 73,
      technique: 71,
    },
  }
  useEffect(() => {
    const loadTeams = async () => {
      try {
        setLoading(true)
        const data = await fetchTeams()
        setTeams(data)
      } catch (error) {
        console.error('Error loading teams:', error)
      } finally {
        setLoading(false)
      }
    }
    loadTeams()
  }, [])
  const filteredTeams = teams.filter((team) =>
    team.name.toLowerCase().includes(searchQuery.toLowerCase()),
  )
  const openTeamModal = (team: Team) => {
    setSelectedTeam(team)
    setIsModalOpen(true)
  }
  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedTeam(null)
  }
  const getStrengthColorClass = (value: number) => {
    if (value >= 85) return 'bg-emerald-500'
    if (value >= 75) return 'bg-green-500'
    if (value >= 65) return 'bg-yellow-500'
    return 'bg-orange-500'
  }
  return (
    <div className="min-h-screen bg-[#0a0a12] text-zinc-100">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-10 sm:py-14">
        <div className="text-center space-y-3 mb-10">
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-semibold tracking-tight text-white">
            Csapatok
          </h1>
          <p className="max-w-2xl mx-auto text-sm sm:text-base text-zinc-300">
            Böngéssz a bajnokság csapatai között és nézd meg az erősségeiket
          </p>
        </div>
        {/* Search bar */}
        <div className="mb-8">
          <div className="relative max-w-md mx-auto">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <SearchIcon className="h-5 w-5 text-zinc-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-3 border-0 rounded-xl bg-white/5 ring-1 ring-white/10 focus:ring-violet-500 focus:outline-none text-zinc-200 placeholder-zinc-400"
              placeholder="Keresés csapatok között..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin h-8 w-8 border-4 border-violet-500 rounded-full border-t-transparent"></div>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {filteredTeams.map((team) => (
              <div
                key={team.id}
                className="bg-white/5 ring-1 ring-white/10 rounded-xl overflow-hidden hover:ring-violet-400/30 hover:bg-white/10 transition-all duration-300 hover:shadow-lg hover:shadow-violet-500/10 hover:-translate-y-1 cursor-pointer"
                onClick={() => openTeamModal(team)}
              >
                <div className="p-6 flex flex-col items-center">
                  <div className="h-24 w-24 rounded-full bg-white/5 ring-1 ring-white/10 p-2 mb-4 flex items-center justify-center">
                    <img
                      src={team.logoUrl}
                      alt={`${team.name} logo`}
                      className="h-full w-full object-contain"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement
                        target.src =
                          'https://via.placeholder.com/150?text=' +
                          encodeURIComponent(team.name.charAt(0))
                      }}
                    />
                  </div>
                  <h3 className="text-xl font-semibold text-white">
                    {team.name}
                  </h3>
                  <div className="flex items-center gap-1 mt-2 text-zinc-400 text-sm">
                    <InfoIcon size={16} />
                    <span>Részletes erősségek</span>
                  </div>
                  <Link
                    to={`/team/${encodeURIComponent(team.name)}`}
                    className="mt-4 text-violet-400 hover:text-violet-300 text-sm font-medium flex items-center gap-1"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <TrophyIcon size={14} />
                    <span>Statisztikák</span>
                  </Link>
                </div>
              </div>
            ))}
            {filteredTeams.length === 0 && (
              <div className="col-span-full text-center py-12">
                <div className="inline-flex items-center justify-center h-12 w-12 rounded-full bg-white/5 ring-1 ring-white/10 mb-4">
                  <UsersIcon className="h-6 w-6 text-zinc-400" />
                </div>
                <h3 className="text-lg font-medium text-zinc-200 mb-1">
                  Nincs találat
                </h3>
                <p className="text-zinc-400 text-sm">
                  Próbálj más keresési feltételt használni
                </p>
              </div>
            )}
          </div>
        )}
      </div>
      {/* Team strengths modal */}
      {isModalOpen && selectedTeam && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-[#0c0f16] ring-1 ring-white/10 rounded-2xl w-full max-w-lg overflow-hidden animate-fadeIn">
            <div className="p-6 border-b border-white/10 flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="h-12 w-12 rounded-full bg-white/5 ring-1 ring-white/10 p-1 flex items-center justify-center">
                  <img
                    src={selectedTeam.logoUrl}
                    alt={`${selectedTeam.name} logo`}
                    className="h-full w-full object-contain"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement
                      target.src =
                        'https://via.placeholder.com/150?text=' +
                        encodeURIComponent(selectedTeam.name.charAt(0))
                    }}
                  />
                </div>
                <h3 className="text-xl font-semibold text-white">
                  {selectedTeam.name}
                </h3>
              </div>
              <button
                className="text-zinc-400 hover:text-zinc-200"
                onClick={closeModal}
                aria-label="Bezárás"
              >
                <XIcon size={20} />
              </button>
            </div>
            <div className="p-6">
              <h4 className="text-lg font-medium text-zinc-200 mb-4 flex items-center gap-2">
                <StarIcon size={18} className="text-amber-400" />
                Csapat erősségei
              </h4>
              {teamStrengths[selectedTeam.name] ? (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <SwordIcon size={16} className="text-red-400" />
                        <span className="text-zinc-300">Támadás</span>
                      </div>
                      <span className="font-semibold">
                        {teamStrengths[selectedTeam.name].attack}/100
                      </span>
                    </div>
                    <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${getStrengthColorClass(teamStrengths[selectedTeam.name].attack)}`}
                        style={{
                          width: `${teamStrengths[selectedTeam.name].attack}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <ShieldCheckIcon size={16} className="text-blue-400" />
                        <span className="text-zinc-300">Védelem</span>
                      </div>
                      <span className="font-semibold">
                        {teamStrengths[selectedTeam.name].defense}/100
                      </span>
                    </div>
                    <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${getStrengthColorClass(teamStrengths[selectedTeam.name].defense)}`}
                        style={{
                          width: `${teamStrengths[selectedTeam.name].defense}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <BarChart4Icon size={16} className="text-violet-400" />
                        <span className="text-zinc-300">Középpálya</span>
                      </div>
                      <span className="font-semibold">
                        {teamStrengths[selectedTeam.name].midfield}/100
                      </span>
                    </div>
                    <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${getStrengthColorClass(teamStrengths[selectedTeam.name].midfield)}`}
                        style={{
                          width: `${teamStrengths[selectedTeam.name].midfield}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <ZapIcon size={16} className="text-amber-400" />
                        <span className="text-zinc-300">Gyorsaság</span>
                      </div>
                      <span className="font-semibold">
                        {teamStrengths[selectedTeam.name].speed}/100
                      </span>
                    </div>
                    <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${getStrengthColorClass(teamStrengths[selectedTeam.name].speed)}`}
                        style={{
                          width: `${teamStrengths[selectedTeam.name].speed}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <StarIcon size={16} className="text-emerald-400" />
                        <span className="text-zinc-300">Technika</span>
                      </div>
                      <span className="font-semibold">
                        {teamStrengths[selectedTeam.name].technique}/100
                      </span>
                    </div>
                    <div className="h-2 bg-white/10 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${getStrengthColorClass(teamStrengths[selectedTeam.name].technique)}`}
                        style={{
                          width: `${teamStrengths[selectedTeam.name].technique}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-6 text-zinc-400">
                  Nincs elérhető adat a csapat erősségeiről
                </div>
              )}
              <div className="mt-6 flex justify-end">
                <Link
                  to={`/team/${encodeURIComponent(selectedTeam.name)}`}
                  className="inline-flex items-center gap-2 text-sm font-semibold tracking-tight text-white bg-gradient-to-br from-violet-500 to-indigo-600 rounded-full px-4 py-2.5 shadow-lg hover:shadow-[0_12px_24px_-6px_rgba(139,92,246,0.4)] hover:-translate-y-0.5 transform-gpu transition"
                >
                  <TrophyIcon size={16} />
                  Csapat statisztikák
                </Link>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

```
```pages/TeamStats.tsx
import React, { useEffect, useState, useRef } from 'react'
import { useParams, Link } from 'react-router-dom'
import {
  ArrowLeftIcon,
  TrophyIcon,
  BarChart4Icon,
  GoalIcon,
  ShuffleIcon,
  HomeIcon,
  FlagIcon,
  CalendarIcon,
  ListIcon,
  PieChartIcon,
} from 'lucide-react'
import { Match, Team } from '../utils/supabaseClient'
import { Chart } from 'chart.js/auto'
export const TeamStats = () => {
  const { teamName } = useParams<{
    teamName: string
  }>()
  const [team, setTeam] = useState<Team | null>(null)
  const [matches, setMatches] = useState<Match[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  // Chart references
  const resultsChartRef = useRef<HTMLCanvasElement>(null)
  const goalsChartRef = useRef<HTMLCanvasElement>(null)
  const resultsChartInstance = useRef<Chart | null>(null)
  const goalsChartInstance = useRef<Chart | null>(null)
  useEffect(() => {
    const fetchTeamStats = async () => {
      try {
        setLoading(true)
        // In a real app, this would be a proper API call
        // For now, we'll simulate fetching from localStorage or a mock
        setTimeout(() => {
          // Mock team data
          const mockTeam: Team = {
            id: 1,
            name: teamName || 'Unknown Team',
            logoUrl:
              'https://upload.wikimedia.org/wikipedia/en/5/5c/Ferencv%C3%A1rosi_TC.svg',
          }
          // Generate mock matches for this team
          const mockMatches: Match[] = Array.from(
            {
              length: 20,
            },
            (_, i) => {
              const isHome = Math.random() > 0.5
              const homeGoals = Math.floor(Math.random() * 5)
              const awayGoals = Math.floor(Math.random() * 5)
              const htHomeGoals = Math.min(
                homeGoals,
                Math.floor(Math.random() * 3),
              )
              const htAwayGoals = Math.min(
                awayGoals,
                Math.floor(Math.random() * 3),
              )
              return {
                id: i + 1,
                home: isHome ? teamName || 'Unknown Team' : `Opponent ${i + 1}`,
                away: isHome ? `Opponent ${i + 1}` : teamName || 'Unknown Team',
                homeTeam: {
                  id: isHome ? 1 : i + 2,
                  name: isHome
                    ? teamName || 'Unknown Team'
                    : `Opponent ${i + 1}`,
                  logoUrl: isHome
                    ? 'https://upload.wikimedia.org/wikipedia/en/5/5c/Ferencv%C3%A1rosi_TC.svg'
                    : `https://via.placeholder.com/40x40?text=${i + 1}`,
                },
                awayTeam: {
                  id: isHome ? i + 2 : 1,
                  name: isHome
                    ? `Opponent ${i + 1}`
                    : teamName || 'Unknown Team',
                  logoUrl: isHome
                    ? `https://via.placeholder.com/40x40?text=${i + 1}`
                    : 'https://upload.wikimedia.org/wikipedia/en/5/5c/Ferencv%C3%A1rosi_TC.svg',
                },
                ht: `${htHomeGoals} - ${htAwayGoals}`,
                ft: `${homeGoals} - ${awayGoals}`,
                btts: homeGoals > 0 && awayGoals > 0,
                comeback:
                  (htHomeGoals > htAwayGoals && homeGoals < awayGoals) ||
                  (htHomeGoals < htAwayGoals && homeGoals > awayGoals),
                homeGoals,
                awayGoals,
              }
            },
          )
          setTeam(mockTeam)
          setMatches(mockMatches)
          setLoading(false)
        }, 800)
      } catch (err) {
        console.error('Error fetching team stats:', err)
        setError('Hiba történt a csapat adatainak betöltése közben')
        setLoading(false)
      }
    }
    fetchTeamStats()
  }, [teamName])
  useEffect(() => {
    if (!loading && matches.length > 0) {
      createCharts()
    }
    return () => {
      // Clean up charts when component unmounts
      if (resultsChartInstance.current) {
        resultsChartInstance.current.destroy()
      }
      if (goalsChartInstance.current) {
        goalsChartInstance.current.destroy()
      }
    }
  }, [loading, matches])
  const createCharts = () => {
    if (!resultsChartRef.current || !goalsChartRef.current) return
    // Calculate statistics for charts
    const wins = matches.filter((match) => {
      const isHome = match.home === teamName
      const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
      return isHome ? homeGoals > awayGoals : awayGoals > homeGoals
    }).length
    const draws = matches.filter((match) => {
      const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
      return homeGoals === awayGoals
    }).length
    const losses = matches.length - wins - draws
    const goalsScored = matches.reduce((sum, match) => {
      const isHome = match.home === teamName
      return sum + (isHome ? match.homeGoals : match.awayGoals)
    }, 0)
    const goalsConceded = matches.reduce((sum, match) => {
      const isHome = match.home === teamName
      return sum + (isHome ? match.awayGoals : match.homeGoals)
    }, 0)
    // Create results chart
    if (resultsChartInstance.current) {
      resultsChartInstance.current.destroy()
    }
    resultsChartInstance.current = new Chart(resultsChartRef.current, {
      type: 'doughnut',
      data: {
        labels: ['Győzelmek', 'Döntetlenek', 'Vereségek'],
        datasets: [
          {
            data: [wins, draws, losses],
            backgroundColor: [
              'rgba(16, 185, 129, 0.7)',
              'rgba(245, 158, 11, 0.7)',
              'rgba(239, 68, 68, 0.7)',
            ],
            borderColor: [
              'rgba(16, 185, 129, 1)',
              'rgba(245, 158, 11, 1)',
              'rgba(239, 68, 68, 1)',
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              color: 'rgba(255, 255, 255, 0.7)',
              font: {
                size: 12,
              },
              padding: 20,
              boxWidth: 12,
              boxHeight: 12,
            },
          },
        },
      },
    })
    // Create goals chart
    if (goalsChartInstance.current) {
      goalsChartInstance.current.destroy()
    }
    goalsChartInstance.current = new Chart(goalsChartRef.current, {
      type: 'bar',
      data: {
        labels: ['Rúgott gólok', 'Kapott gólok'],
        datasets: [
          {
            data: [goalsScored, goalsConceded],
            backgroundColor: [
              'rgba(139, 92, 246, 0.7)',
              'rgba(239, 68, 68, 0.7)',
            ],
            borderColor: ['rgba(139, 92, 246, 1)', 'rgba(239, 68, 68, 1)'],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)',
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)',
            },
          },
          x: {
            grid: {
              display: false,
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)',
            },
          },
        },
      },
    })
  }
  // Calculate team statistics
  const calculateStats = () => {
    if (!matches.length) return null
    const totalMatches = matches.length
    const homeMatches = matches.filter((m) => m.home === teamName).length
    const awayMatches = totalMatches - homeMatches
    const wins = matches.filter((match) => {
      const isHome = match.home === teamName
      const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
      return isHome ? homeGoals > awayGoals : awayGoals > homeGoals
    }).length
    const draws = matches.filter((match) => {
      const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
      return homeGoals === awayGoals
    }).length
    const losses = totalMatches - wins - draws
    const goalsScored = matches.reduce((sum, match) => {
      const isHome = match.home === teamName
      return sum + (isHome ? match.homeGoals : match.awayGoals)
    }, 0)
    const goalsConceded = matches.reduce((sum, match) => {
      const isHome = match.home === teamName
      return sum + (isHome ? match.awayGoals : match.homeGoals)
    }, 0)
    const bttsMatches = matches.filter((m) => m.btts).length
    const comebackMatches = matches.filter((m) => m.comeback).length
    const winPercentage = Math.round((wins / totalMatches) * 100)
    const bttsPercentage = Math.round((bttsMatches / totalMatches) * 100)
    const goalDifference = goalsScored - goalsConceded
    return {
      totalMatches,
      homeMatches,
      awayMatches,
      wins,
      draws,
      losses,
      goalsScored,
      goalsConceded,
      bttsMatches,
      comebackMatches,
      winPercentage,
      bttsPercentage,
      goalDifference,
      averageGoalsScored: (goalsScored / totalMatches).toFixed(2),
      averageGoalsConceded: (goalsConceded / totalMatches).toFixed(2),
    }
  }
  const stats = calculateStats()
  // Generate form (last 5 matches)
  const generateForm = () => {
    if (!matches.length) return []
    return matches.slice(0, 5).map((match) => {
      const isHome = match.home === teamName
      const [homeGoals, awayGoals] = match.ft.split(' - ').map(Number)
      let result: 'W' | 'D' | 'L'
      if (homeGoals === awayGoals) {
        result = 'D'
      } else if (isHome) {
        result = homeGoals > awayGoals ? 'W' : 'L'
      } else {
        result = awayGoals > homeGoals ? 'W' : 'L'
      }
      return {
        opponent: isHome ? match.away : match.home,
        result,
        score: match.ft,
        id: match.id,
      }
    })
  }
  const form = generateForm()
  if (loading) {
    return (
      <div className="min-h-screen bg-[#0a0a12] text-zinc-100 flex items-center justify-center">
        <div className="animate-spin h-8 w-8 border-4 border-violet-500 rounded-full border-t-transparent"></div>
      </div>
    )
  }
  if (error || !team) {
    return (
      <div className="min-h-screen bg-[#0a0a12] text-zinc-100 flex flex-col items-center justify-center p-4">
        <div className="text-red-400 mb-4">
          {error || 'Csapat nem található'}
        </div>
        <Link
          to="/"
          className="inline-flex items-center gap-2 text-sm font-medium text-zinc-200 border border-white/10 rounded-full px-4 py-2.5 hover:bg-white/5"
        >
          <ArrowLeftIcon size={16} />
          Vissza a főoldalra
        </Link>
      </div>
    )
  }
  return (
    <div className="min-h-screen bg-[#0a0a12] text-zinc-100">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        {/* Back navigation */}
        <div className="mb-6">
          <Link
            to="/"
            className="inline-flex items-center gap-2 text-sm font-medium text-zinc-300 hover:text-zinc-100"
          >
            <ArrowLeftIcon size={16} />
            Vissza a mérkőzésekhez
          </Link>
        </div>
        {/* Team header */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-2xl p-6 mb-6">
          <div className="flex flex-col sm:flex-row items-center gap-4">
            <img
              src={team.logoUrl}
              alt={`${team.name} logo`}
              className="w-24 h-24 rounded-full object-cover ring-1 ring-white/10"
            />
            <div className="text-center sm:text-left">
              <h1 className="text-3xl font-bold">{team.name}</h1>
              <p className="text-zinc-400 mt-1">Csapat statisztikák</p>
            </div>
          </div>
        </div>
        {/* Key statistics */}
        {stats && (
          <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4 mb-6">
            <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4 text-center team-stat-card">
              <div className="text-zinc-400 text-xs mb-1">Mérkőzések</div>
              <div className="text-2xl font-semibold">{stats.totalMatches}</div>
            </div>
            <div className="bg-emerald-500/10 ring-1 ring-emerald-400/30 rounded-xl p-4 text-center team-stat-card">
              <div className="text-emerald-300 text-xs mb-1">Győzelmek</div>
              <div className="text-2xl font-semibold text-emerald-300">
                {stats.wins}
              </div>
            </div>
            <div className="bg-amber-500/10 ring-1 ring-amber-400/30 rounded-xl p-4 text-center team-stat-card">
              <div className="text-amber-300 text-xs mb-1">Döntetlenek</div>
              <div className="text-2xl font-semibold text-amber-300">
                {stats.draws}
              </div>
            </div>
            <div className="bg-red-500/10 ring-1 ring-red-400/30 rounded-xl p-4 text-center team-stat-card">
              <div className="text-red-300 text-xs mb-1">Vereségek</div>
              <div className="text-2xl font-semibold text-red-300">
                {stats.losses}
              </div>
            </div>
            <div className="bg-violet-500/10 ring-1 ring-violet-400/30 rounded-xl p-4 text-center team-stat-card">
              <div className="text-violet-300 text-xs mb-1">Nyerési %</div>
              <div className="text-2xl font-semibold text-violet-300">
                {stats.winPercentage}%
              </div>
            </div>
          </div>
        )}
        {/* Charts */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* Results chart */}
          <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <PieChartIcon size={18} />
              Eredmények megoszlása
            </h3>
            <div className="h-64">
              <canvas ref={resultsChartRef}></canvas>
            </div>
          </div>
          {/* Goals chart */}
          <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <BarChart4Icon size={18} />
              Gólok
            </h3>
            <div className="h-64">
              <canvas ref={goalsChartRef}></canvas>
            </div>
          </div>
        </div>
        {/* Detailed statistics */}
        {stats && (
          <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4 mb-6">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <ListIcon size={18} />
              Részletes statisztikák
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                <div className="text-zinc-400 text-xs mb-1">
                  Hazai / Vendég mérkőzések
                </div>
                <div className="flex items-center gap-2">
                  <HomeIcon size={16} className="text-emerald-400" />
                  <span>{stats.homeMatches}</span>
                  <span className="text-zinc-400 mx-1">/</span>
                  <FlagIcon size={16} className="text-sky-400" />
                  <span>{stats.awayMatches}</span>
                </div>
              </div>
              <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                <div className="text-zinc-400 text-xs mb-1">Gólkülönbség</div>
                <div
                  className={`font-medium ${stats.goalDifference > 0 ? 'text-emerald-400' : stats.goalDifference < 0 ? 'text-red-400' : 'text-zinc-300'}`}
                >
                  {stats.goalDifference > 0 ? '+' : ''}
                  {stats.goalDifference}
                </div>
              </div>
              <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                <div className="text-zinc-400 text-xs mb-1">
                  Átlag gólok / meccs
                </div>
                <div className="flex items-center gap-2">
                  <GoalIcon size={16} className="text-emerald-400" />
                  <span>{stats.averageGoalsScored}</span>
                  <span className="text-zinc-400 mx-1">/</span>
                  <GoalIcon size={16} className="text-red-400" />
                  <span>{stats.averageGoalsConceded}</span>
                </div>
              </div>
              <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                <div className="text-zinc-400 text-xs mb-1">
                  BTTS mérkőzések
                </div>
                <div className="flex items-center gap-2">
                  <span>{stats.bttsMatches}</span>
                  <span className="text-zinc-400">
                    ({stats.bttsPercentage}%)
                  </span>
                </div>
              </div>
              <div className="bg-white/5 ring-1 ring-white/10 rounded-lg p-3">
                <div className="text-zinc-400 text-xs mb-1">Fordítások</div>
                <div className="flex items-center gap-2">
                  <ShuffleIcon size={16} className="text-violet-400" />
                  <span>{stats.comebackMatches}</span>
                </div>
              </div>
            </div>
          </div>
        )}
        {/* Form (last 5 matches) */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4 mb-6">
          <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
            <CalendarIcon size={18} />
            Forma (utolsó 5 mérkőzés)
          </h3>
          <div className="flex gap-2 mb-4">
            {form.map((match, index) => (
              <div
                key={index}
                className={`w-10 h-10 rounded-full flex items-center justify-center font-medium ${match.result === 'W' ? 'bg-emerald-500/20 text-emerald-300 ring-1 ring-emerald-400/30' : match.result === 'D' ? 'bg-amber-500/20 text-amber-300 ring-1 ring-amber-400/30' : 'bg-red-500/20 text-red-300 ring-1 ring-red-400/30'}`}
                title={`${match.result === 'W' ? 'Győzelem' : match.result === 'D' ? 'Döntetlen' : 'Vereség'} - ${match.opponent} ellen (${match.score})`}
              >
                {match.result}
              </div>
            ))}
          </div>
          <div className="space-y-2">
            {form.map((match, index) => (
              <Link
                key={index}
                to={`/match/${match.id}`}
                className="block bg-white/5 hover:bg-white/10 transition rounded-lg p-3"
              >
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    <div
                      className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${match.result === 'W' ? 'bg-emerald-500/20 text-emerald-300' : match.result === 'D' ? 'bg-amber-500/20 text-amber-300' : 'bg-red-500/20 text-red-300'}`}
                    >
                      {match.result}
                    </div>
                    <span>{match.opponent}</span>
                  </div>
                  <div className="text-zinc-400">{match.score}</div>
                </div>
              </Link>
            ))}
          </div>
        </div>
        {/* Recent matches */}
        <div className="bg-white/5 ring-1 ring-white/10 rounded-xl p-4">
          <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
            <TrophyIcon size={18} />
            Mérkőzések
          </h3>
          <div className="space-y-2 max-h-96 overflow-y-auto pr-2">
            {matches.map((match, index) => (
              <Link
                key={index}
                to={`/match/${match.id}`}
                className="block bg-white/5 hover:bg-white/10 transition rounded-lg p-3"
              >
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    {match.home === teamName ? (
                      <>
                        <HomeIcon size={16} className="text-emerald-400" />
                        <span className="font-medium">{match.home}</span>
                        <span className="text-zinc-400">vs</span>
                        <span>{match.away}</span>
                      </>
                    ) : (
                      <>
                        <FlagIcon size={16} className="text-sky-400" />
                        <span>{match.home}</span>
                        <span className="text-zinc-400">vs</span>
                        <span className="font-medium">{match.away}</span>
                      </>
                    )}
                  </div>
                  <div className="text-zinc-300">{match.ft}</div>
                </div>
                <div className="flex gap-2 mt-2">
                  {match.btts && (
                    <span className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs bg-violet-500/10 text-violet-300 ring-1 ring-violet-400/30">
                      <GoalIcon size={12} />
                      BTTS
                    </span>
                  )}
                  {match.comeback && (
                    <span className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs bg-amber-500/10 text-amber-300 ring-1 ring-amber-400/30">
                      <ShuffleIcon size={12} />
                      Fordítás
                    </span>
                  )}
                </div>
              </Link>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

```
```tailwind.config.js
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```
```utils/supabaseClient.ts
import { createClient } from '@supabase/supabase-js'
// Replace with your Supabase URL and anon key
const supabaseUrl = 'https://your-supabase-url.supabase.co'
const supabaseAnonKey = 'your-supabase-anon-key'
export const supabase = createClient(supabaseUrl, supabaseAnonKey)
export type Team = {
  id: number
  name: string
  logoUrl: string
}
export type Match = {
  id: number
  home: string
  away: string
  homeTeam: Team
  awayTeam: Team
  ht: string // Half-time score
  ft: string // Full-time score
  btts: boolean // Both teams to score
  comeback: boolean
  homeGoals: number
  awayGoals: number
}
export const fetchTeams = async (): Promise<Team[]> => {
  // In a real implementation, this would fetch from Supabase
  // For now, return mock data
  return [
    {
      id: 1,
      name: 'Ferencváros',
      logoUrl:
        'https://upload.wikimedia.org/wikipedia/en/5/5c/Ferencv%C3%A1rosi_TC.svg',
    },
    {
      id: 2,
      name: 'Újpest FC',
      logoUrl:
        'https://upload.wikimedia.org/wikipedia/en/5/51/%C3%9Ajpest_FC.svg',
    },
    {
      id: 3,
      name: 'Debrecen',
      logoUrl:
        'https://upload.wikimedia.org/wikipedia/en/4/4f/Debreceni_VSC.svg',
    },
    {
      id: 4,
      name: 'Puskás Akadémia',
      logoUrl:
        'https://upload.wikimedia.org/wikipedia/en/8/8d/Pusk%C3%A1s_Akad%C3%A9mia_FC.svg',
    },
    {
      id: 5,
      name: 'MTK Budapest',
      logoUrl:
        'https://upload.wikimedia.org/wikipedia/commons/2/21/MTK_Budapest_FC_logo.svg',
    },
  ]
}
export const fetchMatches = async (filters: {
  home?: string
  away?: string
  btts?: boolean
  comeback?: boolean
}): Promise<Match[]> => {
  // In a real implementation, this would fetch from Supabase with filters
  // For now, return mock data
  const teams = await fetchTeams()
  // Generate some mock matches
  const matches: Match[] = []
  for (let i = 0; i < 100; i++) {
    const homeTeamIndex = Math.floor(Math.random() * teams.length)
    let awayTeamIndex = Math.floor(Math.random() * teams.length)
    // Ensure away team is different from home team
    while (awayTeamIndex === homeTeamIndex) {
      awayTeamIndex = Math.floor(Math.random() * teams.length)
    }
    const homeGoals = Math.floor(Math.random() * 5)
    const awayGoals = Math.floor(Math.random() * 5)
    const htHomeGoals = Math.min(homeGoals, Math.floor(Math.random() * 3))
    const htAwayGoals = Math.min(awayGoals, Math.floor(Math.random() * 3))
    const btts = homeGoals > 0 && awayGoals > 0
    // Determine if there was a comeback
    const htWinner =
      htHomeGoals > htAwayGoals
        ? 'home'
        : htAwayGoals > htHomeGoals
          ? 'away'
          : 'draw'
    const ftWinner =
      homeGoals > awayGoals ? 'home' : awayGoals > homeGoals ? 'away' : 'draw'
    const comeback =
      htWinner !== 'draw' && ftWinner !== 'draw' && htWinner !== ftWinner
    matches.push({
      id: i + 1,
      home: teams[homeTeamIndex].name,
      away: teams[awayTeamIndex].name,
      homeTeam: teams[homeTeamIndex],
      awayTeam: teams[awayTeamIndex],
      ht: `${htHomeGoals} - ${htAwayGoals}`,
      ft: `${homeGoals} - ${awayGoals}`,
      btts,
      comeback,
      homeGoals,
      awayGoals,
    })
  }
  // Apply filters if provided
  let filteredMatches = matches
  if (filters.home) {
    filteredMatches = filteredMatches.filter(
      (match) => match.home === filters.home,
    )
  }
  if (filters.away) {
    filteredMatches = filteredMatches.filter(
      (match) => match.away === filters.away,
    )
  }
  if (filters.btts !== undefined) {
    filteredMatches = filteredMatches.filter(
      (match) => match.btts === filters.btts,
    )
  }
  if (filters.comeback !== undefined) {
    filteredMatches = filteredMatches.filter(
      (match) => match.comeback === filters.comeback,
    )
  }
  return filteredMatches
}

```
